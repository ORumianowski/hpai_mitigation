} else if (transition == "I_b_NB_to_R_b_NB" & I_b_NB > 0) {
I_b_NB = I_b_NB - 1
R_b_NB = R_b_NB + 1
} else if (transition == "I_b_NB_to_D_b_NB" & I_b_NB > 0) {
I_b_NB = I_b_NB - 1
D_b_NB = D_b_NB + 1
} else if (transition == "S_a_NB_to_S_sea_a_NB" & S_a_NB > 0) {
S_a_NB = S_a_NB - 1
S_sea_a_NB = S_sea_a_NB + 1
} else if (transition == "E_a_NB_to_E_sea_a_NB" & E_a_NB > 0) {
E_a_NB = E_a_NB - 1
E_sea_a_NB = E_sea_a_NB + 1
} else if (transition == "I_a_NB_to_I_sea_a_NB" & I_a_NB > 0) {
I_a_NB = I_a_NB - 1
I_sea_a_NB = I_sea_a_NB + 1
} else if (transition == "R_a_NB_to_R_sea_a_NB" & R_a_NB > 0) {
R_a_NB = R_a_NB - 1
R_sea_a_NB = R_sea_a_NB + 1
} else if (transition == "S_b_NB_to_S_sea_b_NB" & S_b_NB > 0) {
S_b_NB = S_b_NB - 1
S_sea_b_NB = S_sea_b_NB + 1
} else if (transition == "E_b_NB_to_E_sea_b_NB" & E_b_NB > 0) {
E_b_NB = E_b_NB - 1
E_sea_b_NB = E_sea_b_NB + 1
} else if (transition == "I_b_NB_to_I_sea_b_NB" & I_b_NB > 0) {
I_b_NB = I_b_NB - 1
I_sea_b_NB = I_sea_b_NB + 1
} else if (transition == "R_b_NB_to_R_sea_b_NB" & R_b_NB > 0) {
R_b_NB = R_b_NB - 1
R_sea_b_NB = R_sea_b_NB + 1
}else if (transition == "S_sea_a_NB_to_S_a_NB" & S_sea_a_NB > 0) {
S_a_NB = S_a_NB + 1
S_sea_a_NB = S_sea_a_NB - 1
} else if (transition == "E_sea_a_NB_to_E_a_NB" & E_sea_a_NB > 0) {
E_a_NB = E_a_NB + 1
E_sea_a_NB = E_sea_a_NB - 1
} else if (transition == "I_sea_a_NB_to_I_a_NB" & I_sea_a_NB > 0) {
I_a_NB = I_a_NB + 1
I_sea_a_NB = I_sea_a_NB - 1
} else if (transition == "R_sea_a_NB_to_R_a_NB" & R_sea_a_NB > 0) {
R_a_NB = R_a_NB + 1
R_sea_a_NB = R_sea_a_NB - 1
} else if (transition == "S_sea_b_NB_to_S_b_NB" & S_sea_b_NB > 0) {
S_b_NB = S_b_NB + 1
S_sea_b_NB = S_sea_b_NB - 1
} else if (transition == "E_sea_b_NB_to_E_b_NB" & E_sea_b_NB > 0) {
E_b_NB = E_b_NB + 1
E_sea_b_NB = E_sea_b_NB - 1
} else if (transition == "I_sea_b_NB_to_I_b_NB" & I_sea_b_NB > 0) {
I_b_NB = I_b_NB + 1
I_sea_b_NB = I_sea_b_NB - 1
} else if (transition == "R_sea_b_NB_to_R_b_NB" & R_sea_b_NB > 0) {
R_b_NB = R_b_NB + 1
R_sea_b_NB = R_sea_b_NB - 1
} else if (transition == "S_a_to_S_a_NB"  & S_a > 0) {
S_a = S_a - 2
S_a_NB = S_a_NB + 2
} else if (transition == "E_a_to_E_a_NB" & E_a > 0) {
E_a = E_a - 2
E_a_NB = E_a_NB + 2
} else if (transition == "I_a_to_I_a_NB" & I_a > 0) {
I_a = I_a - 2
I_a_NB = I_a_NB + 2
} else if (transition == "E_a_to_E_a_NB" & R_a > 0) {
R_a = R_a - 2
R_a_NB = R_a_NB + 2
} else if (transition == "S_sea_a_NB_to_S_sea_b_NB" & S_sea_a_NB > 0) {
S_sea_a_NB = S_sea_a_NB - 1
S_sea_b_NB = S_sea_b_NB + 1
}else if (transition == "E_sea_a_NB_to_E_sea_b_NB" & E_sea_a_NB > 0) {
E_sea_a_NB = E_sea_a_NB - 1
E_sea_b_NB = E_sea_b_NB + 1
}else if (transition == "I_sea_a_NB_to_I_sea_b_NB" & I_sea_a_NB > 0) {
I_sea_a_NB = I_sea_a_NB - 1
I_sea_b_NB = I_sea_b_NB + 1
}else if (transition == "R_sea_a_NB_to_R_sea_b_NB" & R_sea_a_NB > 0) {
R_sea_a_NB = R_sea_a_NB - 1
R_sea_b_NB = R_sea_b_NB + 1
}else if (transition == "S_a_N_to_E_a_N" & S_a_N > 0){
S_a_N = S_a_N - 1
E_a_N = E_a_N + 1
}else if (transition == "E_a_N_to_S_a_N" & E_a_N > 0){
E_a_N = E_a_N - 1
S_a_N = S_a_N + 1
}else if (transition == "E_a_N_to_I_a_N" & E_a_N > 0){
E_a_N = E_a_N - 1
I_a_N = I_a_N + 1
}else if (transition == "I_a_N_to_R_a_N" & I_a_N > 0){
I_a_N = I_a_N - 1
R_a_N = R_a_N + 1
}else if (transition == "I_a_N_to_R_a_N" & I_a_N > 0){
I_a_N = I_a_N - 1
R_a_N = R_a_N + 1
}else if (transition == "I_a_N_to_D_a_N"  & I_a_N > 0){
# If a nestling dies, both parents become non-breeders.
I_a_N = I_a_N - 1
D_a_N = D_a_N + 1
parent1 = sample(c(rep("S_a", S_a), rep("E_a", E_a),rep("I_a", I_a),rep("R_a", R_a),
rep("S_sea_a", S_sea_a), rep("E_sea_a", E_sea_a),rep("I_sea_a", I_sea_a),rep("R_sea_a", R_sea_a)),
size = 1)
if (parent1 == "S_a"){
S_a = S_a - 1
S_a_NB = S_a_NB + 1
} else if (parent1 == "E_a"){
E_a = E_a - 1
E_a_NB = E_a_NB + 1
} else if (parent1 == "I_a"){
I_a = I_a - 1
I_a_NB = I_a_NB + 1
} else if (parent1 == "R_a"){
R_a = R_a - 1
R_a_NB = R_a_NB + 1
} else if (parent1 == "S_sea_a"){
S_sea_a = S_sea_a - 1
S_sea_a_NB = S_sea_a_NB + 1
} else if (parent1 == "E_sea_a"){
E_sea_a = E_sea_a - 1
E_sea_a_NB = E_sea_a_NB + 1
} else if (parent1 == "I_sea_a"){
I_sea_a = I_sea_a - 1
I_sea_a_NB = I_sea_a_NB + 1
} else if (parent1 == "R_sea_a"){
R_sea_a = R_sea_a - 1
R_sea_a_NB = R_sea_a_NB + 1
}
parent2 = sample(c(rep("S_a", S_a), rep("E_a", E_a),rep("I_a", I_a),rep("R_a", R_a),
rep("S_sea_a", S_sea_a), rep("E_sea_a", E_sea_a),rep("I_sea_a", I_sea_a),rep("R_sea_a", R_sea_a)),
size = 1)
if (parent2 == "S_a"){
S_a = S_a - 1
S_a_NB = S_a_NB + 1
} else if (parent2 == "E_a"){
E_a = E_a - 1
E_a_NB = E_a_NB + 1
} else if (parent2 == "I_a"){
I_a = I_a - 1
I_a_NB = I_a_NB + 1
} else if (parent2 == "R_a"){
R_a = R_a - 1
R_a_NB = R_a_NB + 1
} else if (parent2 == "S_sea_a"){
S_sea_a = S_sea_a - 1
S_sea_a_NB = S_sea_a_NB + 1
} else if (parent2 == "E_sea_a"){
E_sea_a = E_sea_a - 1
E_sea_a_NB = E_sea_a_NB + 1
} else if (parent2 == "I_sea_a"){
I_sea_a = I_sea_a - 1
I_sea_a_NB = I_sea_a_NB + 1
} else if (parent2 == "R_sea_a"){
R_sea_a = R_sea_a - 1
R_sea_a_NB = R_sea_a_NB + 1
}
}else if (transition == "S_b_N_to_E_b_N" & S_b_N > 0){
S_b_N = S_b_N - 1
E_b_N = E_b_N + 1
}else if (transition == "E_b_N_to_S_b_N" & E_b_N > 0){
E_b_N = E_b_N - 1
S_b_N = S_b_N + 1
}else if (transition == "E_b_N_to_I_b_N" & E_b_N > 0){
E_b_N = E_b_N - 1
I_b_N = I_b_N + 1
}else if (transition == "I_b_N_to_R_b_N" & I_b_N > 0){
I_b_N = I_b_N - 1
R_b_N = R_b_N + 1
}else if (transition == "I_b_N_to_R_b_N" & I_b_N > 0){
I_b_N = I_b_N - 1
R_b_N = R_b_N + 1
}else if (transition == "I_b_N_to_D_b_N" & I_b_N > 0){
I_b_N = I_b_N - 1
D_b_N = D_b_N + 1
# If a nestling dies, both parents become non-breeders.
parent1 = sample(c(rep("S_b", S_b), rep("E_b", E_b),rep("I_b", I_b),rep("R_b", R_b),
rep("S_sea_b", S_sea_b), rep("E_sea_b", E_sea_b),rep("I_sea_b", I_sea_b),rep("R_sea_b", R_sea_b)),
size = 1)
if (parent1 == "S_b"){
S_b = S_b - 1
S_b_NB = S_b_NB + 1
} else if (parent1 == "E_b"){
E_b = E_b - 1
E_b_NB = E_b_NB + 1
} else if (parent1 == "I_b"){
I_b = I_b - 1
I_b_NB = I_b_NB + 1
} else if (parent1 == "R_b"){
R_b = R_b - 1
R_b_NB = R_b_NB + 1
} else if (parent1 == "S_sea_b"){
S_sea_b = S_sea_b - 1
S_sea_b_NB = S_sea_b_NB + 1
} else if (parent1 == "E_sea_b"){
E_sea_b = E_sea_b - 1
E_sea_b_NB = E_sea_b_NB + 1
} else if (parent1 == "I_sea_b"){
I_sea_b = I_sea_b - 1
I_sea_b_NB = I_sea_b_NB + 1
} else if (parent1 == "R_sea_b"){
R_sea_b = R_sea_b - 1
R_sea_b_NB = R_sea_b_NB + 1
}
parent2 = sample(c(rep("S_b", S_b), rep("E_b", E_b),rep("I_b", I_b),rep("R_b", R_b),
rep("S_sea_b", S_sea_b), rep("E_sea_b", E_sea_b),rep("I_sea_b", I_sea_b),rep("R_sea_b", R_sea_b)),
size = 1)
if (parent2 == "S_b"){
S_b = S_b - 1
S_b_NB = S_b_NB + 1
} else if (parent2 == "E_b"){
E_b = E_b - 1
E_b_NB = E_b_NB + 1
} else if (parent2 == "I_b"){
I_b = I_b - 1
I_b_NB = I_b_NB + 1
} else if (parent2 == "R_b"){
R_b = R_b - 1
R_b_NB = R_b_NB + 1
} else if (parent2 == "S_sea_b"){
S_sea_b = S_sea_b - 1
S_sea_b_NB = S_sea_b_NB + 1
} else if (parent2 == "E_sea_b"){
E_sea_b = E_sea_b - 1
E_sea_b_NB = E_sea_b_NB + 1
} else if (parent2 == "I_sea_b"){
I_sea_b = I_sea_b - 1
I_sea_b_NB = I_sea_b_NB + 1
} else if (parent2 == "R_sea_b"){
R_sea_b = R_sea_b - 1
R_sea_b_NB = R_sea_b_NB + 1
}
}
}
}
new_state = matrix(data = c(S_a, E_a, I_a, R_a, D_a,
S_sea_a, E_sea_a, I_sea_a, R_sea_a, D_sea_a,
S_sea_b, E_sea_b, I_sea_b, R_sea_b, D_sea_b,
S_b, E_b, I_b, R_b, D_b,
S_a_NB, E_a_NB, I_a_NB, R_a_NB, D_a_NB,
S_sea_a_NB, E_sea_a_NB, I_sea_a_NB, R_sea_a_NB, D_sea_a_NB,
S_sea_b_NB, E_sea_b_NB, I_sea_b_NB, R_sea_b_NB, D_sea_b_NB,
S_b_NB, E_b_NB, I_b_NB, R_b_NB, D_b_NB,
S_a_N, E_a_N, I_a_N, R_a_N, D_a_N,
S_b_N, E_b_N, I_b_N, R_b_N, D_b_N),
nrow = 10, ncol = 5,
byrow = T)
states = abind(states, new_state)
}
output = data.frame(
time = times,
S_a = states[1, 1, ],
E_a = states[1, 2, ],
I_a = states[1, 3, ],
R_a = states[1, 4, ],
D_a = states[1, 5, ],
S_sea_a = states[2, 1, ],
E_sea_a = states[2, 2, ],
I_sea_a = states[2, 3, ],
R_sea_a = states[2, 4, ],
D_sea_a = states[2, 5, ],
S_sea_b = states[3, 1, ],
E_sea_b = states[3, 2, ],
I_sea_b = states[3, 3, ],
R_sea_b = states[3, 4, ],
D_sea_b = states[3, 5, ],
S_b = states[4, 1, ],
E_b = states[4, 2, ],
I_b = states[4, 3, ],
R_b = states[4, 4, ],
D_b = states[4, 5, ],
S_a_NB = states[5, 1, ],
E_a_NB = states[5, 2, ],
I_a_NB = states[5, 3, ],
R_a_NB = states[5, 4, ],
D_a_NB = states[5, 5, ],
S_sea_a_NB = states[6, 1, ],
E_sea_a_NB = states[6, 2, ],
I_sea_a_NB = states[6, 3, ],
R_sea_a_NB = states[6, 4, ],
D_sea_a_NB = states[6, 5, ],
S_sea_b_NB = states[7, 1, ],
E_sea_b_NB = states[7, 2, ],
I_sea_b_NB = states[7, 3, ],
R_sea_b_NB = states[7, 4, ],
D_sea_b_NB = states[7, 5, ],
S_b_NB = states[8, 1, ],
E_b_NB = states[8, 2, ],
I_b_NB = states[8, 3, ],
R_b_NB = states[8, 4, ],
D_b_NB = states[8, 5, ],
S_a_N = states[9, 1, ],
E_a_N = states[9, 2, ],
I_a_N = states[9, 3, ],
R_a_N = states[9, 4, ],
D_a_N = states[9, 5, ],
S_b_N = states[10, 1, ],
E_b_N = states[10, 2, ],
I_b_N = states[10, 3, ],
R_b_N = states[10, 4, ],
D_b_N = states[10, 5, ]) %>%
mutate(
S_a_total = S_a + S_sea_a,
E_a_total = E_a + E_sea_a,
I_a_total = I_a + I_sea_a,
R_a_total = R_a + R_sea_a,
D_a_total = D_a + D_sea_a,
S_b_total = S_b + S_sea_b,
E_b_total = E_b + E_sea_b,
I_b_total = I_b + I_sea_b,
R_b_total = R_b + R_sea_b,
D_b_total = D_b + D_sea_b,
S_a_NB_total = S_a_NB + S_sea_a_NB,
E_a_NB_total = E_a_NB + E_sea_a_NB,
I_a_NB_total = I_a_NB + I_sea_a_NB,
R_a_NB_total = R_a_NB + R_sea_a_NB,
D_a_NB_total = D_a_NB + D_sea_a_NB,
S_b_NB_total = S_b_NB + S_sea_b_NB,
E_b_NB_total = E_b_NB + E_sea_b_NB,
I_b_NB_total = I_b_NB + I_sea_b_NB,
R_b_NB_total = R_b_NB + R_sea_b_NB,
D_b_NB_total = D_b_NB + D_sea_b_NB
)
return(output)
}
# Plot results
plot_seir = function(output_ = output){
output_long = melt(output_[1:nrow(output_)-1, ], id = "time")
output_a = output_long %>% filter(variable %in% c("S_a_total", "E_a_total", "I_a_total", "R_a_total", "D_a_total"))
plot_a = ggplot(output_a, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in A (colony+Sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))
output_a_N = output_long %>% filter(variable %in% c("S_a_N", "E_a_N", "I_a_N", "R_a_N", "D_a_N"))
plot_a_N = ggplot(output_a_N, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))
output_a_NB = output_long %>% filter(variable %in% c("S_a_NB_total", "E_a_NB_total", "I_a_NB_total", "R_a_NB_total", "D_a_NB_total"))
plot_a_NB = ggplot(output_a_NB, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-Breeders in A (colony+Sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))
output_b = output_long %>% filter(variable %in% c("S_b_total", "E_b_total", "I_b_total", "R_b_total", "D_b_total"))
plot_b = ggplot(output_b, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in B (colony+Sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))
output_b_N = output_long %>% filter(variable %in% c("S_b_N", "E_b_N", "I_b_N", "R_b_N", "D_b_N"))
plot_b_N = ggplot(output_b_N, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))
output_b_NB = output_long %>% filter(variable %in% c("S_b_NB_total", "E_b_NB_total", "I_b_NB_total", "R_b_NB_total", "D_b_NB_total"))
plot_b_NB = ggplot(output_b_NB, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-Breeders in B (colony+Sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))
plot_grid_seir = plot_grid(plot_a, plot_a_N, plot_a_NB,
plot_b, plot_b_N, plot_b_NB,
labels = c("A", "B", "C",
"D", "E", "F"),
label_size = 12)
print(plot_grid_seir)
}
# Run simulation
time1 <- Sys.time()
output = gillespie_seir(param = param,
induced_dispersal = T,
initial_number_breeders_A = 50,
initial_number_infected_breeders_A = 1,
initial_number_breeders_B = 50,
total_time = 70,
dispersal_stochactic = T,
tau = 0.2)
time2 <- Sys.time()
time2 - time1
plot_seir()
summary_output = function(output){
N_a = output[1, c("S_a", "I_a", "S_sea_a", "I_sea_a",
"S_a_NB", "I_a_NB", "S_sea_a_NB", "I_sea_a_NB")] %>% sum()
max_infected_a = max(output[, c("I_a","I_sea_a")])
prop_max_infected_a = max_infected_a / N_a
dead_a = output[nrow(output), c("D_a","D_sea_a")] %>% sum()
a_N = output[nrow(output), c("S_a_N", "E_a_N", "I_a_N", "R_a_N")] %>% sum()
N_b = output[1, c("S_b", "I_b", "S_sea_b", "I_sea_b",
"S_b_NB", "I_b_NB", "S_sea_b_NB", "I_sea_b_NB")] %>% sum()
max_infected_b = max(output[, c("I_b","I_sea_b")])
prop_max_infected_b = max_infected_b / N_b
dead_b = output[nrow(output), c("D_b","D_sea_b")] %>% sum()
b_N = output[nrow(output), c("S_b_N", "E_b_N", "I_b_N", "R_b_N")] %>% sum()
nb_adults = N_a + N_b - dead_a - dead_b
nb_nestlings = a_N + b_N
nb_adults_equi = nb_adults + (0.2)*nb_nestlings
return( data.frame(
N_a = N_a,
max_infected_a = max_infected_a,
prop_max_infected_a = prop_max_infected_a,
dead_a = dead_a,
a_N = a_N,
N_b = N_b,
max_infected_b = max_infected_b,
prop_max_infected_b = prop_max_infected_b,
dead_b = dead_b,
b_N = b_N,
nb_adults = nb_adults,
nb_nestlings = nb_nestlings,
nb_adults_equi = nb_adults_equi
))
}
stat_model = function(nb_iterations = 15,
param_ = param,
induced_dispersal_ = T,
dispersal_reaction_time_ = 5,
initial_number_breeders_A_ = 50,
initial_number_infected_breeders_A_ = 1,
initial_number_breeders_B_ = 50,
total_time_ = 70,
dispersal_stochactic_ = T,
tau_ = 0.2){
response_list = data.frame()
for (i in 1:nb_iterations){
output = gillespie_seir(param = param_,
induced_dispersal = induced_dispersal_,
dispersal_reaction_time = dispersal_reaction_time_,
initial_number_breeders_A = initial_number_breeders_A_,
initial_number_infected_breeders_A = initial_number_infected_breeders_A_,
initial_number_breeders_B = initial_number_breeders_B_,
total_time = total_time_,
dispersal_stochactic = dispersal_stochactic_,
tau = tau_)
response_list = rbind(response_list, summary_output(output))
}
#return(response_list)
return(response_list$nb_adults_equi %>% mean())
}
output = c()
val_test = 1:40
for (k in val_test){
res = stat_model(dispersal_reaction_time_ = k)
output = c(output, res)
}
df = data.frame(dispersal_reaction_time_ = val_test,
output=output)
ggplot()+
geom_point(data = df, aes(x = dispersal_reaction_time_, y = output))
# data_long = pivot_longer(stat_model(20), cols = -N_a, names_to = "variable", values_to = "value")
# ggplot(data_long %>% subset(., variable %in% c("nb_adults", "nb_nestlings", "nb_adults_equi")),
#        aes(x = variable, y = value)) +
#   geom_violin() +
#   geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
#
# output_long_list = data.frame()
# response_list = data.frame()
#
# nb_iterations = 8
#
# for (i in 1:nb_iterations){
#
#   output = gillespie_seir(param = param,
#                           induced_dispersal = T,
#                           initial_number_breeders_A = 50,
#                           initial_number_infected_breeders_A = 1,
#                           initial_number_breeders_B = 50,
#                           total_time = 70,
#                           dispersal_stochactic = T,
#                           tau = 0.2)
#
#   output_long = melt(output, id = "time")
#
#   output_long_i = cbind(output_long,
#                         data.frame(simulation = rep(i, times = nrow(output_long))))
#
#   output_long_list = rbind(output_long_list, output_long_i)
#   response_list = rbind(response_list, summary_output(output))
#
# }
#
#
# output_a = output_long_list %>% filter(variable %in% c("S_a", "E_a", "I_a", "R_a", "D_a"))
#
# p = ggplot()
# for(i in 1:nb_iterations){
#   p = p + geom_line(data = output_a %>% subset(., simulation == i )
#                     , aes(x = time, y = value, color = variable))
# }
# p = p +
#   labs(x = "Time", y = "Number of individuals", color = "Compartment") +
#   theme_minimal() +
#   ggtitle("Stochastic SEIR Model Simulation (Gillespie Algorithm)")
#
#
# p
#
#
# data_long = pivot_longer(response_list, cols = -N_a, names_to = "variable", values_to = "value")
#
# # Créer les diagrammes en violon pour chaque variable
# ggplot(data_long %>% subset(., variable %in% c("nb_adults", "nb_nestlings", "nb_adults_equi")),
#        aes(x = variable, y = value)) +
#   geom_violin() +
#   geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
#
#
