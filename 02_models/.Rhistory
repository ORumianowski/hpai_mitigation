I_a = I_a - 1
D_a = D_a + 1
partner = sample(c(rep("S_a", S_a), rep("E_a", E_a),rep("I_a", I_a),rep("R_a", R_a),
rep("S_sea_a", S_a), rep("E_sea_a", E_a),rep("I_sea_a", I_a),rep("R_sea_a", R_a)),
size = 1)
if (partner == "S_a"){
S_a = S_a - 1
S_a_NB = S_a_NB + 1
} else if (partner == "E_a"){
E_a = E_a - 1
E_a_NB = E_a_NB + 1
} else if (partner == "I_a"){
I_a = I_a - 1
I_a_NB = I_a_NB + 1
} else if (partner == "R_a"){
R_a = R_a - 1
R_a_NB = R_a_NB + 1
} else if (partner == "S_sea_a"){
S_sea_a = S_sea_a - 1
S_sea_a_NB = S_sea_a_NB + 1
} else if (partner == "E_sea_a"){
E_sea_a = E_sea_a - 1
E_sea_a_NB = E_sea_a_NB + 1
} else if (partner == "I_sea_a"){
I_sea_a = I_sea_a - 1
I_sea_a_NB = I_sea_a_NB + 1
} else if (partner == "R_sea_a"){
R_sea_a = R_sea_a - 1
R_sea_a_NB = R_sea_a_NB + 1
}
} else if (transition == "S_sea_a_to_E_sea_a") {
S_sea_a = S_sea_a - 1
E_sea_a = E_sea_a + 1
} else if (transition == "E_sea_a_to_S_sea_a") {
E_sea_a = E_sea_a - 1
S_sea_a = S_sea_a + 1
} else if (transition == "E_sea_a_to_I_sea_a") {
E_sea_a = E_sea_a - 1
I_sea_a = I_sea_a + 1
} else if (transition == "I_sea_a_to_R_sea_a") {
I_sea_a = I_sea_a - 1
R_sea_a = R_sea_a + 1
} else if (transition == "I_sea_a_to_D_sea_a") {
I_sea_a = I_sea_a - 1
D_sea_a = D_sea_a + 1
} else if (transition == "S_sea_b_to_E_sea_b") {
S_sea_b = S_sea_b - 1
E_sea_b = E_sea_b + 1
} else if (transition == "E_sea_b_to_S_sea_b") {
E_sea_b = E_sea_b - 1
S_sea_b = S_sea_b + 1
} else if (transition == "E_sea_b_to_I_sea_b") {
E_sea_b = E_sea_b - 1
I_sea_b = I_sea_b + 1
} else if (transition == "I_sea_b_to_R_sea_b") {
I_sea_b = I_sea_b - 1
R_sea_b = R_sea_b + 1
} else if (transition == "I_sea_b_to_D_sea_b") {
I_sea_b = I_sea_b - 1
D_sea_b = D_sea_b + 1
} else if (transition == "S_b_to_E_b") {
S_b = S_b - 1
E_b = E_b + 1
} else if (transition == "E_b_to_S_b") {
E_b = E_b - 1
S_b = S_b + 1
} else if (transition == "E_b_to_I_b") {
E_b = E_b - 1
I_b = I_b + 1
} else if (transition == "I_b_to_R_b") {
I_b = I_b - 1
R_b = R_b + 1
} else if (transition == "I_b_to_D_b") {
I_b = I_b - 1
D_b = D_b + 1
} else if (transition == "S_a_to_S_sea_a") {
S_a = S_a - 1
S_sea_a = S_sea_a + 1
} else if (transition == "E_a_to_E_sea_a") {
E_a = E_a - 1
E_sea_a = E_sea_a + 1
} else if (transition == "I_a_to_I_sea_a") {
I_a = I_a - 1
I_sea_a = I_sea_a + 1
} else if (transition == "R_a_to_R_sea_a") {
R_a = R_a - 1
R_sea_a = R_sea_a + 1
} else if (transition == "S_b_to_S_sea_b") {
S_b = S_b - 1
S_sea_b = S_sea_b + 1
} else if (transition == "E_b_to_E_sea_b") {
E_b = E_b - 1
E_sea_b = E_sea_b + 1
} else if (transition == "I_b_to_I_sea_b") {
I_b = I_b - 1
I_sea_b = I_sea_b + 1
} else if (transition == "R_b_to_R_sea_b") {
R_b = R_b - 1
R_sea_b = R_sea_b + 1
}else if (transition == "S_sea_a_to_S_a") {
S_a = S_a + 1
S_sea_a = S_sea_a - 1
} else if (transition == "E_sea_a_to_E_a") {
E_a = E_a + 1
E_sea_a = E_sea_a - 1
} else if (transition == "I_sea_a_to_I_a") {
I_a = I_a + 1
I_sea_a = I_sea_a - 1
} else if (transition == "R_sea_a_to_R_a") {
R_a = R_a + 1
R_sea_a = R_sea_a - 1
} else if (transition == "S_sea_b_to_S_b") {
S_b = S_b + 1
S_sea_b = S_sea_b - 1
} else if (transition == "E_sea_b_to_E_b") {
E_b = E_b + 1
E_sea_b = E_sea_b - 1
} else if (transition == "I_sea_b_to_I_b") {
I_b = I_b + 1
I_sea_b = I_sea_b - 1
} else if (transition == "R_sea_b_to_R_b") {
R_b = R_b + 1
R_sea_b = R_sea_b - 1
} else if (transition == "S_a_to_E_a_NB") {
S_a_NB = S_a_NB - 1
E_a_NB = E_a_NB + 1
} else if (transition == "E_a_NB_to_S_a_NB") {
E_a_NB = E_a_NB - 1
S_a_NB = S_a_NB + 1
} else if (transition == "E_a_NB_to_I_a_NB") {
E_a_NB = E_a_NB - 1
I_a_NB = I_a_NB + 1
} else if (transition == "I_a_NB_to_R_a_NB") {
I_a_NB = I_a_NB - 1
R_a_NB = R_a_NB + 1
} else if (transition == "I_a_NB_to_D_a_NB") {
I_a_NB = I_a_NB - 1
D_a_NB = D_a_NB + 1
} else if (transition == "S_sea_a_NB_to_E_sea_a_NB") {
S_sea_a_NB = S_sea_a_NB - 1
E_sea_a_NB = E_sea_a_NB + 1
} else if (transition == "E_sea_a_NB_to_S_sea_a_NB") {
E_sea_a_NB = E_sea_a_NB - 1
S_sea_a_NB = S_sea_a_NB + 1
} else if (transition == "E_sea_a_NB_to_I_sea_a_NB") {
E_sea_a_NB = E_sea_a_NB - 1
I_sea_a_NB = I_sea_a_NB + 1
} else if (transition == "I_sea_a_NB_to_R_sea_a_NB") {
I_sea_a_NB = I_sea_a_NB - 1
R_sea_a_NB = R_sea_a_NB + 1
} else if (transition == "I_sea_a_NB_to_D_sea_a_NB") {
I_sea_a_NB = I_sea_a_NB - 1
D_sea_a_NB = D_sea_a_NB + 1
} else if (transition == "S_sea_b_NB_to_E_sea_b_NB") {
S_sea_b_NB = S_sea_b_NB - 1
E_sea_b_NB = E_sea_b_NB + 1
} else if (transition == "E_sea_b_NB_to_S_sea_b_NB") {
E_sea_b_NB = E_sea_b_NB - 1
S_sea_b_NB = S_sea_b_NB + 1
} else if (transition == "E_sea_b_NB_to_I_sea_b_NB") {
E_sea_b_NB = E_sea_b_NB - 1
I_sea_b_NB = I_sea_b_NB + 1
} else if (transition == "I_sea_b_NB_to_R_sea_b_NB") {
I_sea_b_NB = I_sea_b_NB - 1
R_sea_b_NB = R_sea_b_NB + 1
} else if (transition == "I_sea_b_NB_to_D_sea_b_NB") {
I_sea_b_NB = I_sea_b_NB - 1
D_sea_b_NB = D_sea_b_NB + 1
} else if (transition == "S_b_NB_to_E_b_NB") {
S_b_NB = S_b_NB - 1
E_b_NB = E_b_NB + 1
} else if (transition == "E_b_NB_to_S_b_NB") {
E_b_NB = E_b_NB - 1
S_b_NB = S_b_NB + 1
} else if (transition == "E_b_NB_to_I_b_NB") {
E_b_NB = E_b_NB - 1
I_b_NB = I_b_NB + 1
} else if (transition == "I_b_NB_to_R_b_NB") {
I_b_NB = I_b_NB - 1
R_b_NB = R_b_NB + 1
} else if (transition == "I_b_NB_to_D_b_NB") {
I_b_NB = I_b_NB - 1
D_b_NB = D_b_NB + 1
} else if (transition == "S_a_NB_to_S_sea_a_NB") {
S_a_NB = S_a_NB - 1
S_sea_a_NB = S_sea_a_NB + 1
} else if (transition == "E_a_NB_to_E_sea_a_NB") {
E_a_NB = E_a_NB - 1
E_sea_a_NB = E_sea_a_NB + 1
} else if (transition == "I_a_NB_to_I_sea_a_NB") {
I_a_NB = I_a_NB - 1
I_sea_a_NB = I_sea_a_NB + 1
} else if (transition == "R_a_NB_to_R_sea_a_NB") {
R_a_NB = R_a_NB - 1
R_sea_a_NB = R_sea_a_NB + 1
} else if (transition == "S_b_NB_to_S_sea_b_NB") {
S_b_NB = S_b_NB - 1
S_sea_b_NB = S_sea_b_NB + 1
} else if (transition == "E_b_NB_to_E_sea_b_NB") {
E_b_NB = E_b_NB - 1
E_sea_b_NB = E_sea_b_NB + 1
} else if (transition == "I_b_NB_to_I_sea_b_NB") {
I_b_NB = I_b_NB - 1
I_sea_b_NB = I_sea_b_NB + 1
} else if (transition == "R_b_NB_to_R_sea_b_NB") {
R_b_NB = R_b_NB - 1
R_sea_b_NB = R_sea_b_NB + 1
}else if (transition == "S_sea_a_NB_to_S_a_NB") {
S_a_NB = S_a_NB + 1
S_sea_a_NB = S_sea_a_NB - 1
} else if (transition == "E_sea_a_NB_to_E_a_NB") {
E_a_NB = E_a_NB + 1
E_sea_a_NB = E_sea_a_NB - 1
} else if (transition == "I_sea_a_NB_to_I_a_NB") {
I_a_NB = I_a_NB + 1
I_sea_a_NB = I_sea_a_NB - 1
} else if (transition == "R_sea_a_NB_to_R_a_NB") {
R_a_NB = R_a_NB + 1
R_sea_a_NB = R_sea_a_NB - 1
} else if (transition == "S_sea_b_NB_to_S_b_NB") {
S_b_NB = S_b_NB + 1
S_sea_b_NB = S_sea_b_NB - 1
} else if (transition == "E_sea_b_NB_to_E_b_NB") {
E_b_NB = E_b_NB + 1
E_sea_b_NB = E_sea_b_NB - 1
} else if (transition == "I_sea_b_NB_to_I_b_NB") {
I_b_NB = I_b_NB + 1
I_sea_b_NB = I_sea_b_NB - 1
} else if (transition == "R_sea_b_NB_to_R_b_NB") {
R_b_NB = R_b_NB + 1
R_sea_b_NB = R_sea_b_NB - 1
} else if (transition == "S_a_to_S_a_NB") {
S_a = S_a - 2
S_a_NB = S_a_NB + 2
} else if (transition == "E_a_to_E_a_NB") {
E_a = E_a - 2
E_a_NB = E_a_NB + 2
} else if (transition == "I_a_to_I_a_NB") {
I_a = I_a - 2
I_a_NB = I_a_NB + 2
} else if (transition == "E_a_to_E_a_NB") {
R_a = R_a - 2
R_a_NB = R_a_NB + 2
} else if (transition == "S_sea_a_NB_to_S_sea_b_NB") {
S_sea_a_NB = S_sea_a_NB - 1
S_sea_b_NB = S_sea_b_NB + 1
}else if (transition == "E_sea_a_NB_to_E_sea_b_NB") {
E_sea_a_NB = E_sea_a_NB - 1
E_sea_b_NB = E_sea_b_NB + 1
}else if (transition == "I_sea_a_NB_to_I_sea_b_NB") {
I_sea_a_NB = I_sea_a_NB - 1
I_sea_b_NB = I_sea_b_NB + 1
}else if (transition == "R_sea_a_NB_to_R_sea_b_NB") {
R_sea_a_NB = R_sea_a_NB - 1
R_sea_b_NB = R_sea_b_NB + 1
}else if (transition == "S_a_N_to_E_a_N"){
S_a_N = S_a_N - 1
E_a_N = E_a_N + 1
}else if (transition == "E_a_N_to_S_a_N"){
E_a_N = E_a_N - 1
S_a_N = S_a_N + 1
}else if (transition == "E_a_N_to_I_a_N"){
E_a_N = E_a_N - 1
I_a_N = I_a_N + 1
}else if (transition == "I_a_N_to_R_a_N"){
I_a_N = I_a_N - 1
R_a_N = R_a_N + 1
}else if (transition == "I_a_N_to_R_a_N"){
I_a_N = I_a_N - 1
R_a_N = R_a_N + 1
}else if (transition == "I_a_N_to_D_a_N"){
I_a_N = I_a_N - 1
D_a_N = D_a_N + 1
}else if (transition == "S_b_N_to_E_b_N"){
S_b_N = S_b_N - 1
E_b_N = E_b_N + 1
}else if (transition == "E_b_N_to_S_b_N"){
E_b_N = E_b_N - 1
S_b_N = S_b_N + 1
}else if (transition == "E_b_N_to_I_b_N"){
E_b_N = E_b_N - 1
I_b_N = I_b_N + 1
}else if (transition == "I_b_N_to_R_b_N"){
I_b_N = I_b_N - 1
R_b_N = R_b_N + 1
}else if (transition == "I_b_N_to_R_b_N"){
I_b_N = I_b_N - 1
R_b_N = R_b_N + 1
}else if (transition == "I_b_N_to_D_b_N"){
I_b_N = I_b_N - 1
D_b_N = D_b_N + 1
}
new_state = matrix(data = c(S_a, E_a, I_a, R_a, D_a,
S_sea_a, E_sea_a, I_sea_a, R_sea_a, D_sea_a,
S_sea_b, E_sea_b, I_sea_b, R_sea_b, D_sea_b,
S_b, E_b, I_b, R_b, D_b,
S_a_NB, E_a_NB, I_a_NB, R_a_NB, D_a_NB,
S_sea_a_NB, E_sea_a_NB, I_sea_a_NB, R_sea_a_NB, D_sea_a_NB,
S_sea_b_NB, E_sea_b_NB, I_sea_b_NB, R_sea_b_NB, D_sea_b_NB,
S_b_NB, E_b_NB, I_b_NB, R_b_NB, D_b_NB,
S_a_N, E_a_N, I_a_N, R_a_N, D_a_N,
S_b_N, E_b_N, I_b_N, R_b_N, D_b_N),
nrow = 10, ncol = 5,
byrow = T)
print(new_state)
states = abind(states, new_state)
}
output = data.frame(
time = times,
S_a = states[1, 1, ],
E_a = states[1, 2, ],
I_a = states[1, 3, ],
R_a = states[1, 4, ],
D_a = states[1, 5, ],
S_sea_a = states[2, 1, ],
E_sea_a = states[2, 2, ],
I_sea_a = states[2, 3, ],
R_sea_a = states[2, 4, ],
D_sea_a = states[2, 5, ],
S_sea_b = states[3, 1, ],
E_sea_b = states[3, 2, ],
I_sea_b = states[3, 3, ],
R_sea_b = states[3, 4, ],
D_sea_b = states[3, 5, ],
S_b = states[4, 1, ],
E_b = states[4, 2, ],
I_b = states[4, 3, ],
R_b = states[4, 4, ],
D_b = states[4, 5, ],
S_a_NB = states[5, 1, ],
E_a_NB = states[5, 2, ],
I_a_NB = states[5, 3, ],
R_a_NB = states[5, 4, ],
D_a_NB = states[5, 5, ],
S_sea_a_NB = states[6, 1, ],
E_sea_a_NB = states[6, 2, ],
I_sea_a_NB = states[6, 3, ],
R_sea_a_NB = states[6, 4, ],
D_sea_a_NB = states[6, 5, ],
S_sea_b_NB = states[7, 1, ],
E_sea_b_NB = states[7, 2, ],
I_sea_b_NB = states[7, 3, ],
R_sea_b_NB = states[7, 4, ],
D_sea_b_NB = states[7, 5, ],
S_b_NB = states[8, 1, ],
E_b_NB = states[8, 2, ],
I_b_NB = states[8, 3, ],
R_b_NB = states[8, 4, ],
D_b_NB = states[8, 5, ],
S_a_N = states[9, 1, ],
E_a_N = states[9, 2, ],
I_a_N = states[9, 3, ],
R_a_N = states[9, 4, ],
D_a_N = states[9, 5, ],
S_b_N = states[10, 1, ],
E_b_N = states[10, 2, ],
I_b_N = states[10, 3, ],
R_b_N = states[10, 4, ],
D_b_N = states[10, 5, ]
)
return(output)
}
# Run simulation
output = gillespie_seir(param,
initial_state,
total_time)
# Plot results
output_long = melt(output[1:nrow(output)-1, ], id = "time")
output_a = output_long %>% filter(variable %in% c("S_a", "E_a", "I_a", "R_a", "D_a"))
plot_a = ggplot(output_a, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Compartment") +
theme_minimal() +
ggtitle("At colony A - Breeders")+
scale_color_brewer(palette="Set2")
plot_a
output_a_N = output_long %>% filter(variable %in% c("S_a_N", "E_a_N", "I_a_N", "R_a_N", "D_a_N"))
plot_a_N = ggplot(output_a_N, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Compartment") +
theme_minimal() +
ggtitle("At colony A - Nestlings")+
scale_color_brewer(palette="Set2")
plot_a_N
output_sea_a = output_long %>% filter(variable %in% c("S_sea_a", "E_sea_a", "I_sea_a", "R_sea_a", "D_sea_a"))
plot_sea_a = ggplot(output_sea_a, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Compartment") +
theme_minimal() +
ggtitle("At sea A - Breeders")+
scale_color_brewer(palette="Set2")
plot_sea_a
output_sea_a_NB = output_long %>% filter(variable %in% c("S_sea_a_NB", "E_sea_a_NB", "I_sea_a_NB", "R_sea_a_NB", "D_sea_a_NB"))
plot_sea_a_NB = ggplot(output_sea_a_NB, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Compartment") +
theme_minimal() +
ggtitle("At sea A - Non-breeders")+
scale_color_brewer(palette="Set2")
plot_sea_a_NB
output_sea_b_NB = output_long %>% filter(variable %in% c("S_sea_b_NB", "E_sea_b_NB", "I_sea_b_NB", "R_sea_b_NB", "D_sea_b_NB"))
plot_sea_b_NB = ggplot(output_sea_b_NB, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Compartment") +
theme_minimal() +
ggtitle("At sea B - Non-breeders")+
scale_color_brewer(palette="Set2")
plot_sea_b_NB
output_b = output_long %>% filter(variable %in% c("S_b", "E_b", "I_b", "R_b", "D_b"))
plot_b = ggplot(output_b, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Compartment") +
theme_minimal() +
ggtitle("In colony B") +
scale_color_brewer(palette="Set2")
plot_b
output_b_N = output_long %>% filter(variable %in% c("S_b_N", "E_b_N", "I_b_N", "R_b_N", "D_b_N"))
plot_b_N = ggplot(output_b_N, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Compartment") +
theme_minimal() +
ggtitle("At colony B - Nestlings")+
scale_color_brewer(palette="Set2")
plot_b_N
#
# summary_output = function(output){
#
#   N_a = output[1, c("S_a", "I_a")] %>% sum()
#
#   max_infected_a = max(output[, "I_a"])
#   prop_max_infected_a = max_infected_a / N_a
#   dead_a = output[nrow(output), "D_a"]
#   prop_dead_a = dead_a / N_a
#
#   max_infected_sea = max(output[, "I_sea"])
#   dead_sea = output[nrow(output), "D_sea"]
#
#   prop_non_exposed_from_a = (output[nrow(output), "S_a"] + output[nrow(output), "S_sea"] - output[1, "S_sea"] ) / N_a
#
#   return( data.frame(
#     N_a = N_a,
#     max_infected_a = max_infected_a,
#     prop_max_infected_a = prop_max_infected_a,
#     dead_a = dead_a,
#     prop_dead_a = prop_dead_a,
#     max_infected_sea = max_infected_sea,
#     dead_sea = dead_sea,
#     prop_non_exposed_from_a = prop_non_exposed_from_a
#
#   ))
# }
#
#
# output_long_list = data.frame()
# response_list = data.frame()
#
# nb_iterations = 8
#
# for (i in 1:nb_iterations){
#
#   output = gillespie_seir(epi_param, initial_state, total_time)
#   output_long = melt(output, id = "time")
#
#   output_long_i = cbind(output_long,
#                          data.frame(simulation = rep(i, times = nrow(output_long))))
#
#   output_long_list = rbind(output_long_list, output_long_i)
#   response_list = rbind(response_list, summary_output(output))
#
# }
#
#
# output_a = output_long_list %>% filter(variable %in% c("S_a", "E_a", "I_a", "R_a", "D_a"))
#
# p = ggplot()
# for(i in 1:nb_iterations){
#   p = p + geom_line(data = output_a %>% subset(., simulation == i )
#                     , aes(x = time, y = value, color = variable))
# }
# p = p +
#   labs(x = "Time", y = "Number of individuals", color = "Compartment") +
#   theme_minimal() +
#   ggtitle("Stochastic SEIR Model Simulation (Gillespie Algorithm)")
#
#
# p
#
#
# data_long = pivot_longer(response_list, cols = -N_a, names_to = "variable", values_to = "value")
#
# # Créer les diagrammes en violon pour chaque variable
# ggplot(data_long %>% subset(., variable %in% c("dead_a", "max_infected_a")),
#        aes(x = variable, y = value)) +
#   geom_violin() +
#   geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
#
#
plot_b / plot_b_N
plot_grid(plot_b, plot_b_N, labels = c('A', 'B'), label_size = 12)
?plot_grid
plot_grid(plot_sea_b_NB, plot_b, plot_b_N, labels = c('A', 'B', "C"), label_size = 12)
plot_grid(plot_a, plot_a_N, plot_sea_a, plot_sea_a_NB, labels = c('A', 'B', "C", "D"), label_size = 12)
output_sea_b = output_long %>% filter(variable %in% c("S_sea_b", "E_sea_b", "I_sea_b", "R_sea_b", "D_sea_b"))
plot_sea_b = ggplot(output_sea_b, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Compartment") +
theme_minimal() +
ggtitle("At sea B - Breeders")+
scale_color_brewer(palette="Set2")
plot_sea_b
plot_grid(plot_a, plot_a_N, plot_sea_a, plot_sea_a_NB, labels = c('A', 'B', "C", "D"), label_size = 12)
plot_grid(plot_b, plot_b_N, plot_sea_b, plot_sea_b_NB, labels = c('A', 'B', "C"), label_size = 12)
