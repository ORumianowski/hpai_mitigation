nb_samples
output_bank <- data.frame(
nb_adults_equi = numeric(nb_samples),
nb_infected_colonies = numeric(nb_samples),
infected_X_time = numeric(nb_samples)
)
i = 5
output <- gillespie_seir(
initial_number_infected_breeders_A = samples[i, 1],
initial_number_infected_breeders_B = samples[i, 2],
initial_number_infected_breeders_C = samples[i, 3],
initial_number_breeders_A = samples[i, 4],
initial_number_breeders_B = samples[i, 5],
initial_number_breeders_C = samples[i, 6],
dispersal_reaction_time = samples[i, 7],
dispersal_date = samples[i, 8],
hatching_date = samples[i, 9],
tau = samples[i, 10],
total_time = samples[i, 11],
prop_dispersal = samples[i, 12],
beta_E_colony = samples[i, 13],
beta_I_colony = samples[i, 14],
sigma = samples[i, 15],
eta = samples[i, 16],
gamma = samples[i, 17],
mu_adult = samples[i, 18],
mu_nestling = samples[i, 19],
zeta_to_sea = samples[i, 20],
zeta_to_colony = samples[i, 21],
rho_to_sea = samples[i, 22],
rho_to_colony = samples[i, 23],
psi = samples[i, 24],
hatching_sd = samples[i, 25],
reaching_repro_prob = samples[i, 26]
)
output_bank[i, ] <- c(output$nb_adults_equi, output$nb_infected_colonies, output$infected_X_time)
simulation_results <- run_simulations(samples_converted, param_ranges)
simulation_results <- run_simulations(samples, nb_samples)
))
))
simulation_results <- run_simulations(samples, nb_samples)
# Prepare data for visualization
plot_data <- data.frame(
beta_I_colony = samples_converted[, 14],
mobility = samples_converted[, 23],
nb_adults_equi = simulation_results$nb_adults_equi
)
# Prepare data for visualization
plot_data <- data.frame(
beta_I_colony = samples[, 14],
mobility = samples[, 23],
nb_adults_equi = simulation_results$nb_adults_equi
)
# Plot heatmap
plot_heatmap <- function(data) {
ggplot(data) +
geom_tile(aes(x = beta_I_colony, y = mobility, fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap(plot_data)
samples
samples$beta_I_colony
samples[,"beta_I_colony"]
samples[, "mobility"]
# Prepare data for visualization
plot_data <- data.frame(
beta_I_colony = samples[,"beta_I_colony"],
mobility = samples[, "rho_to_colony"],
nb_adults_equi = simulation_results$nb_adults_equi
)
simulation_results
# Prepare data for visualization
plot_data <- data.frame(
beta_I_colony = samples[,"beta_I_colony"],
mobility = samples[, "rho_to_colony"],
nb_adults_equi = simulation_results$nb_adults_equi
)
# Plot heatmap
plot_heatmap <- function(data) {
ggplot(data) +
geom_tile(aes(x = beta_I_colony, y = mobility, fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap(plot_data)
# Bin data and calculate averages
block_size <- 0.05
plot_data_binned <- plot_data %>%
mutate(
beta_bin = cut(beta_I_colony, breaks = seq(min(beta_I_colony), max(beta_I_colony), by = block_size), include.lowest = TRUE),
mobility_bin = cut(mobility, breaks = seq(min(mobility), max(mobility), by = block_size), include.lowest = TRUE)
) %>%
group_by(beta_bin, mobility_bin) %>%
summarise(nb_adults_equi_avg = mean(nb_adults_equi, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
beta_mid = as.numeric(sub("\\((.+),.*", "\\1", beta_bin)) + block_size / 2,
mobility_mid = as.numeric(sub("\\((.+),.*", "\\1", mobility_bin)) + block_size / 2
)
# Plot binned heatmap
plot_heatmap_binned <- function(data) {
ggplot(data) +
geom_tile(aes(x = beta_mid, y = mobility_mid, fill = nb_adults_equi_avg), width = block_size, height = block_size) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap_binned(plot_data_binned)
# Create bins for beta_I_colony and plot boxplots
interval_size <- 0.05
plot_data_binned_boxplot <- plot_data %>%
mutate(beta_I_colony_bin = cut(beta_I_colony, breaks = seq(param_ranges$beta_I_colony[1], param_ranges$beta_I_colony[2], by = interval_size), include.lowest = TRUE)) %>%
na.omit()
ggplot(plot_data_binned_boxplot, aes(x = beta_I_colony_bin, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
# Plot boxplots
interval_size <- 0.05
plot_data_binned_boxplot <- plot_data %>%
mutate(beta_I_colony_bin = cut(beta_I_colony, breaks = seq(param_ranges$beta_I_colony[1], param_ranges$beta_I_colony[2], by = interval_size), include.lowest = TRUE)) %>%
na.omit()
ggplot(plot_data_binned_boxplot, aes(x = beta_I_colony_bin, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
Plot boxplots
interval_size <- 0.05
plot_data_binned_boxplot <- plot_data %>%
mutate(parameter = cut(beta_I_colony,
breaks = seq(param_ranges$beta_I_colony[1],
param_ranges$beta_I_colony[2],
by = interval_size), include.lowest = TRUE)) %>%
na.omit()
ggplot(parameter, aes(x = beta_I_colony_bin, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
interval_size <- 0.05
plot_data_binned_boxplot <- plot_data %>%
mutate(parameter = cut(beta_I_colony,
breaks = seq(param_ranges$beta_I_colony[1],
param_ranges$beta_I_colony[2],
by = interval_size), include.lowest = TRUE)) %>%
na.omit()
ggplot(plot_data_binned_boxplot, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
# Définir la taille des intervalles et le nom du paramètre
interval_size <- 0.05
evaluated_parameter <- "beta_I_colony"
# Préparer les données pour le boxplot avec des noms de variables dynamiques
plot_data_binned_boxplot <- plot_data %>%
mutate(parameter = cut(
get(evaluated_parameter),  # Utiliser get() pour accéder dynamiquement à la variable
breaks = seq(
param_ranges[[evaluated_parameter]][1],  # Accéder dynamiquement à la plage de paramètres
param_ranges[[evaluated_parameter]][2],
by = interval_size
),
include.lowest = TRUE
)) %>%
na.omit()
# Créer le boxplot
ggplot(plot_data_binned_boxplot, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
des intervalles et le nom du paramètre
interval_size <- 0.05
evaluated_parameter <- "reaching_repro_prob"
# Préparer les données pour le boxplot avec des noms de variables dynamiques
plot_data_binned_boxplot <- plot_data %>%
mutate(parameter = cut(
get(evaluated_parameter),  # Utiliser get() pour accéder dynamiquement à la variable
breaks = seq(
param_ranges[[evaluated_parameter]][1],  # Accéder dynamiquement à la plage de paramètres
param_ranges[[evaluated_parameter]][2],
by = interval_size
),
include.lowest = TRUE
)) %>%
na.omit()
# Créer le boxplot
ggplot(plot_data_binned_boxplot, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
simulation_dt = cbind(samples, simulation_results)
simulation_dt
plot_heatmap <- function(data) {
ggplot(simulation_dt) +
geom_tile(aes(x = beta_I_colony, y = mobility, fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap(simulation_dt)
plot_heatmap <- function(data) {
ggplot(simulation_dt) +
geom_tile(aes(x = beta_I_colony, y = rho_to_colony, fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap(simulation_dt)
plot_heatmap <- function(data) {
ggplot(simulation_dt) +
geom_tile(aes(x = beta_I_colony, y = reaching_repro_prob, fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap(simulation_dt)
plot_heatmap <- function(data) {
ggplot(simulation_dt) +
geom_tile(aes(x = beta_I_colony, y = reaching_repro_prob, fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "repro", fill = "ENLA")
}
plot_heatmap(simulation_dt)
# Run simulations and store results
run_simulations <- function(samples, nb_samples,
induced_dispersal_,
dispersal_stochastic_) {
output_bank <- data.frame(
nb_adults_equi = numeric(nb_samples),
nb_infected_colonies = numeric(nb_samples),
infected_X_time = numeric(nb_samples)
)
for (i in 1:nb_samples) {
output <- gillespie_seir(
induced_dispersal = induced_dispersal_,
dispersal_stochastic  = dispersal_stochastic_,
initial_number_infected_breeders_A = samples[i, 1],
initial_number_infected_breeders_B = samples[i, 2],
initial_number_infected_breeders_C = samples[i, 3],
initial_number_breeders_A = samples[i, 4],
initial_number_breeders_B = samples[i, 5],
initial_number_breeders_C = samples[i, 6],
dispersal_reaction_time = samples[i, 7],
dispersal_date = samples[i, 8],
hatching_date = samples[i, 9],
tau = samples[i, 10],
total_time = samples[i, 11],
prop_dispersal = samples[i, 12],
beta_E_colony = samples[i, 13],
beta_I_colony = samples[i, 14],
sigma = samples[i, 15],
eta = samples[i, 16],
gamma = samples[i, 17],
mu_adult = samples[i, 18],
mu_nestling = samples[i, 19],
zeta_to_sea = samples[i, 20],
zeta_to_colony = samples[i, 21],
rho_to_sea = samples[i, 22],
rho_to_colony = samples[i, 23],
psi = samples[i, 24],
hatching_sd = samples[i, 25],
reaching_repro_prob = samples[i, 26]
)
output_bank[i, ] <- c(output$nb_adults_equi, output$nb_infected_colonies, output$infected_X_time)
}
return(output_bank)
}
nb_samples <- 500
simulation_results <- run_simulations(samples, nb_samples,
induced_dispersal_= T,
dispersal_stochastic_ = T)
plot_heatmap <- function(data) {
ggplot(data) +
geom_tile(aes(x = beta_I_colony, y = reaching_repro_prob, fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "repro", fill = "ENLA")
}
plot_heatmap(simulation_dt)
# Plot binned heatmap
block_size <- 0.05
plot_data_binned <- simulation_dt %>%
mutate(
beta_bin = cut(beta_I_colony, breaks = seq(min(beta_I_colony), max(beta_I_colony), by = block_size), include.lowest = TRUE),
reaching_repro_prob_bin = cut(reaching_repro_prob, breaks = seq(min(reaching_repro_prob), max(reaching_repro_prob), by = block_size), include.lowest = TRUE)
) %>%
group_by(beta_bin, mobility_bin) %>%
summarise(nb_adults_equi_avg = mean(nb_adults_equi, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
beta_mid = as.numeric(sub("\\((.+),.*", "\\1", beta_bin)) + block_size / 2,
mobility_mid = as.numeric(sub("\\((.+),.*", "\\1", mobility_bin)) + block_size / 2
)
plot_data_binned <- simulation_dt %>%
mutate(
beta_bin = cut(beta_I_colony, breaks = seq(min(beta_I_colony), max(beta_I_colony), by = block_size), include.lowest = TRUE),
reaching_repro_prob_bin = cut(reaching_repro_prob, breaks = seq(min(reaching_repro_prob), max(reaching_repro_prob), by = block_size), include.lowest = TRUE)
) %>%
group_by(beta_bin, reaching_repro_prob_bin) %>%
summarise(nb_adults_equi_avg = mean(nb_adults_equi, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
beta_mid = as.numeric(sub("\\((.+),.*", "\\1", beta_bin)) + block_size / 2,
mobility_mid = as.numeric(sub("\\((.+),.*", "\\1", reaching_repro_prob_bin)) + block_size / 2
)
plot_heatmap_binned <- function(data) {
ggplot(data) +
geom_tile(aes(x = beta_mid, y = mobility_mid, fill = nb_adults_equi_avg), width = block_size, height = block_size) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap_binned(plot_data_binned)
# Plot binned heatmap
block_size <- 0.05
plot_data_binned <- simulation_dt %>%
mutate(
V1 = cut(beta_I_colony, breaks = seq(min(beta_I_colony), max(beta_I_colony), by = block_size), include.lowest = TRUE),
V2 = cut(reaching_repro_prob, breaks = seq(min(reaching_repro_prob), max(reaching_repro_prob), by = block_size), include.lowest = TRUE)
) %>%
group_by(V1, V2) %>%
summarise(nb_adults_equi_avg = mean(nb_adults_equi, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
beta_mid = as.numeric(sub("\\((.+),.*", "\\1", V1)) + block_size / 2,
mobility_mid = as.numeric(sub("\\((.+),.*", "\\1", V2)) + block_size / 2
)
plot_heatmap_binned <- function(data) {
ggplot(data) +
geom_tile(aes(x = beta_mid, y = mobility_mid, fill = nb_adults_equi_avg), width = block_size, height = block_size) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap_binned(plot_data_binned)
# Définir la taille des intervalles et le nom du paramètre
interval_size <- 0.05
# Définir la taille des intervalles et le nom du paramètre
interval_size <- 0.05
evaluated_parameter <- "reaching_repro_prob"
# Préparer les données pour le boxplot avec des noms de variables dynamiques
plot_data_binned_boxplot <- plot_data %>%
mutate(parameter = cut(
get(evaluated_parameter),  # Utiliser get() pour accéder dynamiquement à la variable
breaks = seq(
param_ranges[[evaluated_parameter]][1],  # Accéder dynamiquement à la plage de paramètres
param_ranges[[evaluated_parameter]][2],
by = interval_size
),
include.lowest = TRUE
)) %>%
na.omit()
# Créer le boxplot
ggplot(plot_data_binned_boxplot, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
# Préparer les données pour le boxplot avec des noms de variables dynamiques
plot_data_binned_boxplot <- simulation_dt %>%
mutate(parameter = cut(
get(evaluated_parameter),  # Utiliser get() pour accéder dynamiquement à la variable
breaks = seq(
param_ranges[[evaluated_parameter]][1],  # Accéder dynamiquement à la plage de paramètres
param_ranges[[evaluated_parameter]][2],
by = interval_size
),
include.lowest = TRUE
)) %>%
na.omit()
# Créer le boxplot
ggplot(plot_data_binned_boxplot, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
plot_heatmap(simulation_dt)
# Plot binned heatmap
block_size <- 0.05
plot_data_binned <- simulation_dt %>%
mutate(
V1 = cut(beta_I_colony, breaks = seq(min(beta_I_colony), max(beta_I_colony), by = block_size), include.lowest = TRUE),
V2 = cut(reaching_repro_prob, breaks = seq(min(reaching_repro_prob), max(reaching_repro_prob), by = block_size), include.lowest = TRUE)
) %>%
group_by(V1, V2) %>%
summarise(nb_adults_equi_avg = mean(nb_adults_equi, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
beta_mid = as.numeric(sub("\\((.+),.*", "\\1", V1)) + block_size / 2,
mobility_mid = as.numeric(sub("\\((.+),.*", "\\1", V2)) + block_size / 2
)
plot_heatmap_binned <- function(data) {
ggplot(data) +
geom_tile(aes(x = beta_mid, y = mobility_mid, fill = nb_adults_equi_avg), width = block_size, height = block_size) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = "Beta", y = "Mobility", fill = "ENLA")
}
plot_heatmap_binned(plot_data_binned)
evaluated_parameter <- c("beta_I_colony", "reaching_repro_prob")
plot_heatmap <- function(data, params) {
ggplot(data) +
geom_tile(aes(x = get(params[1]),
y = get(params[2]),
fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = params[1],
y = params[2],
fill = "ENLA")
}
plot_heatmap(simulation_dt, evaluated_parameter)
evaluated_parameter <- c("rho_to_colony", "reaching_repro_prob")
plot_heatmap <- function(data, params) {
ggplot(data) +
geom_tile(aes(x = get(params[1]),
y = get(params[2]),
fill = nb_adults_equi), width = 0.01, height = 0.01) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = params[1],
y = params[2],
fill = "ENLA")
}
plot_heatmap(simulation_dt, evaluated_parameter)
plot_heatmap(simulation_dt, evaluated_parameter)
# Plot binned heatmap
block_size <- 0.05
evaluated_parameter <- evaluated_parameter #c("rho_to_colony", "reaching_repro_prob")
# Block size
block_size <- 0.05
# Function to create binned data with dynamic parameters
create_binned_data <- function(data, params, block_size) {
data %>%
mutate(
V1 = cut(get(params[1]), breaks = seq(min(get(params[1])), max(get(params[1])), by = block_size), include.lowest = TRUE),
V2 = cut(get(params[2]), breaks = seq(min(get(params[2])), max(get(params[2])), by = block_size), include.lowest = TRUE)
) %>%
group_by(V1, V2) %>%
summarise(nb_adults_equi_avg = mean(nb_adults_equi, na.rm = TRUE)) %>%
ungroup() %>%
mutate(
x_mid = as.numeric(sub("\\((.+),.*", "\\1", V1)) + block_size / 2,
y_mid = as.numeric(sub("\\((.+),.*", "\\1", V2)) + block_size / 2
)
}
# Function to create a heatmap with dynamic parameters
plot_heatmap_binned <- function(data, params) {
ggplot(data) +
geom_tile(aes(x = x_mid, y = y_mid, fill = nb_adults_equi_avg), width = block_size, height = block_size) +
scale_fill_gradient(low = "yellow", high = "blue") +
theme_minimal() +
labs(x = params[1], y = params[2], fill = "ENLA")
}
# Create binned data with dynamic parameters
plot_data_binned <- create_binned_data(simulation_dt, evaluated_parameter, block_size)
# Visualize the heatmap with dynamic parameters
plot_heatmap_binned(plot_data_binned, evaluated_parameter)
# Définir la taille des intervalles et le nom du paramètre
interval_size <- 0.05
evaluated_parameter <- "reaching_repro_prob"
# Préparer les données pour le boxplot avec des noms de variables dynamiques
plot_data_binned_boxplot <- simulation_dt %>%
mutate(parameter = cut(
get(evaluated_parameter),  # Utiliser get() pour accéder dynamiquement à la variable
breaks = seq(
param_ranges[[evaluated_parameter]][1],  # Accéder dynamiquement à la plage de paramètres
param_ranges[[evaluated_parameter]][2],
by = interval_size
),
include.lowest = TRUE
)) %>%
na.omit()
# Créer le boxplot
ggplot(plot_data_binned_boxplot, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
# Préparer les données pour le boxplot avec des noms de variables dynamiques
boxplot_dt <- simulation_dt %>%
mutate(parameter = cut(
get(evaluated_parameter),  # Utiliser get() pour accéder dynamiquement à la variable
breaks = seq(
param_ranges[[evaluated_parameter]][1],  # Accéder dynamiquement à la plage de paramètres
param_ranges[[evaluated_parameter]][2],
by = interval_size
),
include.lowest = TRUE
)) %>%
na.omit()
# Créer le boxplot
ggplot(boxplot_dt, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Transmission Rate", y = "ENLA")
# Créer le boxplot
ggplot(boxplot_dt, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = evaluated_parameter, y = "ENLA")
