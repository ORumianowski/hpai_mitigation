R_c = R_c - 1
R_sea_c = R_sea_c + 1
### From sea C to colony C
} else if (transition == "S_sea_c_to_S_c" & S_sea_c > 0) {
S_c = S_c + 1
S_sea_c = S_sea_c - 1
} else if (transition == "E_sea_c_to_E_c" & E_sea_c > 0) {
E_c = E_c + 1
E_sea_c = E_sea_c - 1
} else if (transition == "I_sea_c_to_I_c" & I_sea_c > 0) {
I_c = I_c + 1
I_sea_c = I_sea_c - 1
} else if (transition == "R_sea_c_to_R_c" & R_sea_c > 0) {
R_c = R_c + 1
R_sea_c = R_sea_c - 1
## Non-Breeders
### From colony A to sea
} else if (transition == "S_a_NB_to_S_sea_NB" & S_a_NB > 0) {
S_a_NB = S_a_NB - 1
S_sea_NB = S_sea_NB + 1
} else if (transition == "E_a_NB_to_E_sea_NB" & E_a_NB > 0) {
E_a_NB = E_a_NB - 1
E_sea_NB = E_sea_NB + 1
} else if (transition == "I_a_NB_to_I_sea_NB" & I_a_NB > 0) {
I_a_NB = I_a_NB - 1
I_sea_NB = I_sea_NB + 1
} else if (transition == "R_a_NB_to_R_sea_NB" & R_a_NB > 0) {
R_a_NB = R_a_NB - 1
R_sea_NB = R_sea_NB + 1
### From sea to colony A
}else if (transition == "S_sea_NB_to_S_a_NB" & S_sea_NB > 0) {
S_a_NB = S_a_NB + 1
S_sea_NB = S_sea_NB - 1
} else if (transition == "E_sea_NB_to_E_a_NB" & E_sea_NB > 0) {
E_a_NB = E_a_NB + 1
E_sea_NB = E_sea_NB - 1
} else if (transition == "I_sea_NB_to_I_a_NB" & I_sea_NB > 0) {
I_a_NB = I_a_NB + 1
I_sea_NB = I_sea_NB - 1
} else if (transition == "R_sea_NB_to_R_a_NB" & R_sea_NB > 0) {
R_a_NB = R_a_NB + 1
R_sea_NB = R_sea_NB - 1
### From colony B to sea
} else if (transition == "S_b_NB_to_S_sea_NB" & S_b_NB > 0) {
S_b_NB = S_b_NB - 1
S_sea_NB = S_sea_NB + 1
} else if (transition == "E_b_NB_to_E_sea_NB" & E_b_NB > 0) {
E_b_NB = E_b_NB - 1
E_sea_NB = E_sea_NB + 1
} else if (transition == "I_b_NB_to_I_sea_NB" & I_b_NB > 0) {
I_b_NB = I_b_NB - 1
I_sea_NB = I_sea_NB + 1
} else if (transition == "R_b_NB_to_R_sea_NB" & R_b_NB > 0) {
R_b_NB = R_b_NB - 1
R_sea_NB = R_sea_NB + 1
### From sea to colony B
} else if (transition == "S_sea_NB_to_S_b_NB" & S_sea_NB > 0) {
S_b_NB = S_b_NB + 1
S_sea_NB = S_sea_NB - 1
} else if (transition == "E_sea_NB_to_E_b_NB" & E_sea_NB > 0) {
E_b_NB = E_b_NB + 1
E_sea_NB = E_sea_NB - 1
} else if (transition == "I_sea_NB_to_I_b_NB" & I_sea_NB > 0) {
I_b_NB = I_b_NB + 1
I_sea_NB = I_sea_NB - 1
} else if (transition == "R_sea_NB_to_R_b_NB" & R_sea_NB > 0) {
R_b_NB = R_b_NB + 1
R_sea_NB = R_sea_NB - 1
### From colony C to sea
} else if (transition == "S_c_NB_to_S_sea_NB" & S_c_NB > 0) {
S_c_NB = S_c_NB - 1
S_sea_NB = S_sea_NB + 1
} else if (transition == "E_c_NB_to_E_sea_NB" & E_c_NB > 0) {
E_c_NB = E_c_NB - 1
E_sea_NB = E_sea_NB + 1
} else if (transition == "I_c_NB_to_I_sea_NB" & I_c_NB > 0) {
I_c_NB = I_c_NB - 1
I_sea_NB = I_sea_NB + 1
} else if (transition == "R_c_NB_to_R_sea_NB" & R_c_NB > 0) {
R_c_NB = R_c_NB - 1
R_sea_NB = R_sea_NB + 1
### From sea to colony C
} else if (transition == "S_sea_NB_to_S_c_NB" & S_sea_NB > 0) {
S_c_NB = S_c_NB + 1
S_sea_NB = S_sea_NB - 1
} else if (transition == "E_sea_NB_to_E_c_NB" & E_sea_NB > 0) {
E_c_NB = E_c_NB + 1
E_sea_NB = E_sea_NB - 1
} else if (transition == "I_sea_NB_to_I_c_NB" & I_sea_NB > 0) {
I_c_NB = I_c_NB + 1
I_sea_NB = I_sea_NB - 1
} else if (transition == "R_sea_NB_to_R_c_NB" & R_sea_NB > 0) {
R_c_NB = R_c_NB + 1
R_sea_NB = R_sea_NB - 1
# } else if (transition == "S_a_to_S_a_NB"  & S_a > 0) {
#   S_a = S_a - 2
#   S_a_NB = S_a_NB + 2
# } else if (transition == "E_a_to_E_a_NB" & E_a > 0) {
#   E_a = E_a - 2
#   E_a_NB = E_a_NB + 2
# } else if (transition == "I_a_to_I_a_NB" & I_a > 0) {
#   I_a = I_a - 2
#   I_a_NB = I_a_NB + 2
# } else if (transition == "E_a_to_E_a_NB" & R_a > 0) {
#   R_a = R_a - 2
#   R_a_NB = R_a_NB + 2
} # transition
} # for : transitions_bank
} # if : transitions_bank
new_state = matrix(data = c(S_a_N, E_a_N, I_a_N, R_a_N, D_a_N,
S_a, E_a, I_a, R_a, D_a,
S_sea_a, E_sea_a, I_sea_a, R_sea_a, D_sea_a,
S_a_NB, E_a_NB, I_a_NB, R_a_NB, D_a_NB,
S_b_N, E_b_N, I_b_N, R_b_N, D_b_N,
S_b, E_b, I_b, R_b, D_b,
S_sea_b, E_sea_b, I_sea_b, R_sea_b, D_sea_b,
S_b_NB, E_b_NB, I_b_NB, R_b_NB, D_b_NB,
S_c_N, E_c_N, I_c_N, R_c_N, D_c_N,
S_c, E_c, I_c, R_c, D_c,
S_sea_c, E_sea_c, I_sea_c, R_sea_c, D_sea_c,
S_c_NB, E_c_NB, I_c_NB, R_c_NB, D_c_NB,
S_sea_NB, E_sea_NB, I_sea_NB, R_sea_NB, D_sea_NB
),
nrow = 13, ncol = 5,
byrow = T)
states = abind(states, new_state)
} # while
output = data.frame(
time = times,
S_a_N = states[1, 1, ],
E_a_N = states[1, 2, ],
I_a_N = states[1, 3, ],
R_a_N = states[1, 4, ],
D_a_N = states[1, 5, ],
S_a = states[2, 1, ],
E_a = states[2, 2, ],
I_a = states[2, 3, ],
R_a = states[2, 4, ],
D_a = states[2, 5, ],
S_sea_a = states[3, 1, ],
E_sea_a = states[3, 2, ],
I_sea_a = states[3, 3, ],
R_sea_a = states[3, 4, ],
D_sea_a = states[3, 5, ],
S_a_NB = states[4, 1, ],
E_a_NB = states[4, 2, ],
I_a_NB = states[4, 3, ],
R_a_NB = states[4, 4, ],
D_a_NB = states[4, 5, ],
S_b_N = states[5, 1, ],
E_b_N = states[5, 2, ],
I_b_N = states[5, 3, ],
R_b_N = states[5, 4, ],
D_b_N = states[5, 5, ],
S_b = states[6, 1, ],
E_b = states[6, 2, ],
I_b = states[6, 3, ],
R_b = states[6, 4, ],
D_b = states[6, 5, ],
S_sea_b = states[7, 1, ],
E_sea_b = states[7, 2, ],
I_sea_b = states[7, 3, ],
R_sea_b = states[7, 4, ],
D_sea_b = states[7, 5, ],
S_b_NB = states[8, 1, ],
E_b_NB = states[8, 2, ],
I_b_NB = states[8, 3, ],
R_b_NB = states[8, 4, ],
D_b_NB = states[8, 5, ],
S_c_N = states[9, 1, ],
E_c_N = states[9, 2, ],
I_c_N = states[9, 3, ],
R_c_N = states[9, 4, ],
D_c_N = states[9, 5, ],
S_c = states[10, 1, ],
E_c = states[10, 2, ],
I_c = states[10, 3, ],
R_c = states[10, 4, ],
D_c = states[10, 5, ],
S_sea_c = states[11, 1, ],
E_sea_c = states[11, 2, ],
I_sea_c = states[11, 3, ],
R_sea_c = states[11, 4, ],
D_sea_c = states[11, 5, ],
S_c_NB = states[12, 1, ],
E_c_NB = states[12, 2, ],
I_c_NB = states[12, 3, ],
R_c_NB = states[12, 4, ],
D_c_NB = states[12, 5, ],
S_sea_NB = states[13, 1, ],
E_sea_NB = states[13, 2, ],
I_sea_NB = states[13, 3, ],
R_sea_NB = states[13, 4, ],
D_sea_NB = states[13, 5, ]
) %>%
mutate(
S_a_total = S_a + S_sea_a,
E_a_total = E_a + E_sea_a,
I_a_total = I_a + I_sea_a,
R_a_total = R_a + R_sea_a,
D_a_total = D_a + D_sea_a,
S_b_total = S_b + S_sea_b,
E_b_total = E_b + E_sea_b,
I_b_total = I_b + I_sea_b,
R_b_total = R_b + R_sea_b,
D_b_total = D_b + D_sea_b,
S_c_total = S_c + S_sea_c,
E_c_total = E_c + E_sea_c,
I_c_total = I_c + I_sea_c,
R_c_total = R_c + R_sea_c,
D_c_total = D_c + D_sea_c
)
return(output)
} # function
# Plot results
plot_seir = function(output_ = output){
output_long = melt(output_[1:nrow(output_)-1, ], id = "time")
# In A
output_a = output_long %>% filter(variable %in% c("S_a_total", "E_a_total", "I_a_total", "R_a_total", "D_a_total"))
plot_a = ggplot(output_a, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in A (colony+Sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a$value == 0)) 1 else NA)
output_a_N = output_long %>% filter(variable %in% c("S_a_N", "E_a_N", "I_a_N", "R_a_N", "D_a_N"))
plot_a_N = ggplot(output_a_N, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a_N$value == 0)) 1 else NA)
output_a_NB = output_long %>% filter(variable %in% c("S_a_NB", "E_a_NB", "I_a_NB", "R_a_NB", "D_a_NB"))
plot_a_NB = ggplot(output_a_NB, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a_NB$value == 0)) 1 else NA)
# In B
output_b = output_long %>% filter(variable %in% c("S_b_total", "E_b_total", "I_b_total", "R_b_total", "D_b_total"))
plot_b = ggplot(output_b, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in B (colony+Sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b$value == 0)) 1 else NA)
output_b_N = output_long %>% filter(variable %in% c("S_b_N", "E_b_N", "I_b_N", "R_b_N", "D_b_N"))
plot_b_N = ggplot(output_b_N, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b_N$value == 0)) 1 else NA)
output_b_NB = output_long %>% filter(variable %in% c("S_b_NB", "E_b_NB", "I_b_NB", "R_b_NB", "D_b_NB"))
plot_b_NB = ggplot(output_b_NB, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b_NB$value == 0)) 1 else NA)
# In C
output_c = output_long %>% filter(variable %in% c("S_c_total", "E_c_total", "I_c_total", "R_c_total", "D_c_total"))
plot_c = ggplot(output_c, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in C (colony+Sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c$value == 0)) 1 else NA)
output_c_N = output_long %>% filter(variable %in% c("S_c_N", "E_c_N", "I_c_N", "R_c_N", "D_c_N"))
plot_c_N = ggplot(output_c_N, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in C")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c_N$value == 0)) 1 else NA)
output_c_NB = output_long %>% filter(variable %in% c("S_c_NB", "E_c_NB", "I_c_NB", "R_c_NB", "D_c_NB"))
plot_c_NB = ggplot(output_c_NB, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony C")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c_NB$value == 0)) 1 else NA)
# At sea
output_sea_NB = output_long %>% filter(variable %in% c("S_sea_NB", "E_sea_NB", "I_sea_NB", "R_sea_NB", "D_sea_NB"))
plot_sea_NB = ggplot(output_sea_NB, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder at sea")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_sea_NB$value == 0)) 1 else NA)
plot_grid_seir = plot_grid(plot_a, plot_a_N, plot_sea_NB,
plot_b, plot_b_N, plot_b_NB,
plot_c, plot_c_N, plot_c_NB,
labels = c("A", "B", "C",
"D", "E", "F",
"G", "H", "I"),
label_size = 12)
print(plot_grid_seir)
}
# Run simulation
time1 <- Sys.time()
output = gillespie_seir(param = param,
induced_dispersal = T,
initial_number_infected_breeders_A = 1,
initial_number_breeders_A = 50,
initial_number_breeders_B = 50,
initial_number_breeders_C = 50,
total_time = 70,
dispersal_stochactic = T,
tau = 0.2)
time2 <- Sys.time()
time2 - time1
plot_seir()
#
#
# # summary_output ----------------------------------------------------------
#
# summary_output = function(output){
#
#   N_a = output[1, c("S_a", "I_a", "S_sea_a", "I_sea_a",
#                     "S_a_NB", "I_a_NB", "S_sea_a_NB", "I_sea_a_NB")] %>% sum()
#   max_infected_a = max(output[, c("I_a","I_sea_a")])
#   prop_max_infected_a = max_infected_a / N_a
#   dead_a = output[nrow(output), c("D_a","D_sea_a")] %>% sum()
#   a_N = output[nrow(output), c("S_a_N", "E_a_N", "I_a_N", "R_a_N")] %>% sum()
#
#
#   N_b = output[1, c("S_b", "I_b", "S_sea_b", "I_sea_b",
#                     "S_b_NB", "I_b_NB", "S_sea_b_NB", "I_sea_b_NB")] %>% sum()
#   max_infected_b = max(output[, c("I_b","I_sea_b")])
#   prop_max_infected_b = max_infected_b / N_b
#   dead_b = output[nrow(output), c("D_b","D_sea_b")] %>% sum()
#   b_N = output[nrow(output), c("S_b_N", "E_b_N", "I_b_N", "R_b_N")] %>% sum()
#
#
#   nb_adults = N_a + N_b - dead_a - dead_b
#   nb_nestlings = a_N + b_N
#   nb_adults_equi = nb_adults + (0.2)*nb_nestlings
#
#
#   return( data.frame(
#     N_a = N_a,
#     max_infected_a = max_infected_a,
#     prop_max_infected_a = prop_max_infected_a,
#     dead_a = dead_a,
#     a_N = a_N,
#
#     N_b = N_b,
#     max_infected_b = max_infected_b,
#     prop_max_infected_b = prop_max_infected_b,
#     dead_b = dead_b,
#     b_N = b_N,
#
#     nb_adults = nb_adults,
#     nb_nestlings = nb_nestlings,
#     nb_adults_equi = nb_adults_equi
#
#
#
#   ))
# }
#
#
# # stat_model --------------------------------------------------------------
#
# stat_model = function(nb_iterations = 5,
#                       param_ = param,
#                       induced_dispersal_ = T,
#                       dispersal_reaction_time_ = 5,
#                       initial_number_breeders_A_ = 50,
#                       initial_number_infected_breeders_A_ = 1,
#                       initial_number_breeders_B_ = 50,
#                       total_time_ = 70,
#                       dispersal_stochactic_ = T,
#                       tau_ = 0.2){
#
#   response_list = data.frame()
#
#   for (i in 1:nb_iterations){
#
#     output = gillespie_seir(param = param_,
#                             induced_dispersal = induced_dispersal_,
#                             dispersal_reaction_time = dispersal_reaction_time_,
#                             initial_number_breeders_A = initial_number_breeders_A_,
#                             initial_number_infected_breeders_A = initial_number_infected_breeders_A_,
#                             initial_number_breeders_B = initial_number_breeders_B_,
#                             total_time = total_time_,
#                             dispersal_stochactic = dispersal_stochactic_,
#                             tau = tau_)
#
#     response_list = rbind(response_list, summary_output(output))
#
#   }
#
#   #return(response_list)
#
#
#   return(response_list$nb_adults_equi )
# }
#
#
# # plot --------------------------------------------------------------------
#
#
#
# output = c()
# val_test = (1:20)*2
#
# for (k in val_test){
#
#   res = stat_model(dispersal_reaction_time_ = k)
#
#   output = c(output, res)
#
# }
#
# df = data.frame(dispersal_reaction_time = rep(val_test, each = 5),
#            output=output) %>%
#   mutate(dispersal_reaction_time = dispersal_reaction_time %>%as.factor())
#
# ggplot(data = df, aes(x = dispersal_reaction_time, y = output))+
#   geom_violin(position=position_dodge(1)) +
#   geom_dotplot(binaxis='y', stackdir='center', binwidth=0.4) +
#   ggthemes::theme_clean() +
#   theme(
#     panel.border = element_blank(), # Enlever la bordure du panel
#     axis.title = element_text(size = 11),  # Thicken axis titles
#     axis.text = element_text(size = 10),  # Thicken axis text
#     axis.line = element_line(size = 2),  # Thicken axis lines
#     panel.background = element_rect(fill = "transparent", color = NA),
#     plot.background = element_rect(fill = "transparent", color = NA),
#     legend.position =  "none"
#   )+
#   labs(x = "Reaction Time", y = "Settlement probabilities", title = "",
#        fill = "Arrival colony type")
#
#
#
#
# # data_long = pivot_longer(stat_model(20), cols = -N_a, names_to = "variable", values_to = "value")
# # ggplot(data_long %>% subset(., variable %in% c("nb_adults", "nb_nestlings", "nb_adults_equi")),
# #        aes(x = variable, y = value)) +
# #   geom_violin() +
# #   geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
#
#
#
#
# #
# # output_long_list = data.frame()
# # response_list = data.frame()
# #
# # nb_iterations = 8
# #
# # for (i in 1:nb_iterations){
# #
# #   output = gillespie_seir(param = param,
# #                           induced_dispersal = T,
# #                           initial_number_breeders_A = 50,
# #                           initial_number_infected_breeders_A = 1,
# #                           initial_number_breeders_B = 50,
# #                           total_time = 70,
# #                           dispersal_stochactic = T,
# #                           tau = 0.2)
# #
# #   output_long = melt(output, id = "time")
# #
# #   output_long_i = cbind(output_long,
# #                         data.frame(simulation = rep(i, times = nrow(output_long))))
# #
# #   output_long_list = rbind(output_long_list, output_long_i)
# #   response_list = rbind(response_list, summary_output(output))
# #
# # }
# #
# #
# # output_a = output_long_list %>% filter(variable %in% c("S_a", "E_a", "I_a", "R_a", "D_a"))
# #
# # p = ggplot()
# # for(i in 1:nb_iterations){
# #   p = p + geom_line(data = output_a %>% subset(., simulation == i )
# #                     , aes(x = time, y = value, color = variable))
# # }
# # p = p +
# #   labs(x = "Time", y = "Number of individuals", color = "Compartment") +
# #   theme_minimal() +
# #   ggtitle("Stochastic SEIR Model Simulation (Gillespie Algorithm)")
# #
# #
# # p
# #
# #
# # data_long = pivot_longer(response_list, cols = -N_a, names_to = "variable", values_to = "value")
# #
# # # Créer les diagrammes en violon pour chaque variable
# # ggplot(data_long %>% subset(., variable %in% c("nb_adults", "nb_nestlings", "nb_adults_equi")),
# #        aes(x = variable, y = value)) +
# #   geom_violin() +
# #   geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
# #
# #
