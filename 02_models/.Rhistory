E_sea_c = states[11, 2, ],
I_sea_c = states[11, 3, ],
R_sea_c = states[11, 4, ],
D_sea_c = states[11, 5, ],
S_c_NB = states[12, 1, ],
E_c_NB = states[12, 2, ],
I_c_NB = states[12, 3, ],
R_c_NB = states[12, 4, ],
D_c_NB = states[12, 5, ],
S_sea_NB = states[13, 1, ],
E_sea_NB = states[13, 2, ],
I_sea_NB = states[13, 3, ],
R_sea_NB = states[13, 4, ],
D_sea_NB = states[13, 5, ]
) %>%
mutate(
S_a_total = S_a + S_sea_a,
E_a_total = E_a + E_sea_a,
I_a_total = I_a + I_sea_a,
R_a_total = R_a + R_sea_a,
D_a_total = D_a + D_sea_a,
S_b_total = S_b + S_sea_b,
E_b_total = E_b + E_sea_b,
I_b_total = I_b + I_sea_b,
R_b_total = R_b + R_sea_b,
D_b_total = D_b + D_sea_b,
S_c_total = S_c + S_sea_c,
E_c_total = E_c + E_sea_c,
I_c_total = I_c + I_sea_c,
R_c_total = R_c + R_sea_c,
D_c_total = D_c + D_sea_c
)
output = list(all_states,
simulated_dispersal_date)
return(output)
} # function
# Plot results
plot_seir = function(output_){
output_1 = output_[[1]]
output_2 = output_[[2]]
output_long = melt(output_1[1:nrow(output_1)-1, ], id = "time")
# In A
output_a = output_long %>% filter(variable %in% c("S_a_total", "E_a_total", "I_a_total", "R_a_total", "D_a_total"))
plot_a = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in A (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a$value == 0)) 1 else NA)
output_a_N = output_long %>% filter(variable %in% c("S_a_N", "E_a_N", "I_a_N", "R_a_N", "D_a_N"))
plot_a_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a_N$value == 0)) 1 else NA)
output_a_NB = output_long %>% filter(variable %in% c("S_a_NB", "E_a_NB", "I_a_NB", "R_a_NB", "D_a_NB"))
plot_a_NB =  ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a_NB$value == 0)) 1 else NA)
# In B
output_b = output_long %>% filter(variable %in% c("S_b_total", "E_b_total", "I_b_total", "R_b_total", "D_b_total"))
plot_b = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in B (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b$value == 0)) 1 else NA)
output_b_N = output_long %>% filter(variable %in% c("S_b_N", "E_b_N", "I_b_N", "R_b_N", "D_b_N"))
plot_b_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b_N$value == 0)) 1 else NA)
output_b_NB = output_long %>% filter(variable %in% c("S_b_NB", "E_b_NB", "I_b_NB", "R_b_NB", "D_b_NB"))
plot_b_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b_NB$value == 0)) 1 else NA)
# In C
output_c = output_long %>% filter(variable %in% c("S_c_total", "E_c_total", "I_c_total", "R_c_total", "D_c_total"))
plot_c = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in C (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c$value == 0)) 1 else NA)
output_c_N = output_long %>% filter(variable %in% c("S_c_N", "E_c_N", "I_c_N", "R_c_N", "D_c_N"))
plot_c_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in C")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c_N$value == 0)) 1 else NA)
output_c_NB = output_long %>% filter(variable %in% c("S_c_NB", "E_c_NB", "I_c_NB", "R_c_NB", "D_c_NB"))
plot_c_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony C")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c_NB$value == 0)) 1 else NA)
# At sea
output_sea_NB = output_long %>% filter(variable %in% c("S_sea_NB", "E_sea_NB", "I_sea_NB", "R_sea_NB", "D_sea_NB"))
plot_sea_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_sea_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder at sea")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_sea_NB$value == 0)) 1 else NA)
plot_grid_seir = plot_grid(plot_a, plot_a_N, plot_sea_NB,
plot_b, plot_b_N, plot_b_NB,
plot_c, plot_c_N, plot_c_NB,
labels = c("A", "B", "C",
"D", "E", "F",
"G", "H", "I"),
label_size = 12)
print(plot_grid_seir)
}
# Run simulation
time1 <- Sys.time()
output = gillespie_seir(
# Do we induce dispersion ?
induced_dispersal = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time = 2,
# Initial conditions
initial_number_infected_breeders_A = 5,
initial_number_breeders_A = 100,
initial_number_breeders_B = 100,
initial_number_breeders_C = 20,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB = 4,
# Number of simu_adultlation days
total_time = 50,
# Parameter of the taul-leap agorithm
tau = 0.05)
time2 <- Sys.time()
time2 - time1
plot_seir(output_ = output)
# summary_output ----------------------------------------------------------
summary_output = function(output, reaching.repro.prob = 0.3){
output = output[[1]]
N_a = output[1, c("S_a", "I_a", "S_sea_a", "I_sea_a")] %>% sum()
dead_a = output[nrow(output), c("D_a","D_sea_a")] %>% sum()
a_N = output[nrow(output), c("S_a_N", "E_a_N", "I_a_N", "R_a_N")] %>% sum()
max_infected_a =  output[, c("E_a", "E_sea_a", "I_a","I_sea_a")] %>%
rowSums() %>%
max()
N_b = output[1, c("S_b", "I_b", "S_sea_b", "I_sea_b")] %>% sum()
dead_b = output[nrow(output), c("D_b","D_sea_b")] %>% sum()
b_N = output[nrow(output), c("S_b_N", "E_b_N", "I_b_N", "R_b_N")] %>% sum()
max_infected_b =  output[, c("E_b", "E_sea_b", "I_b","I_sea_b")] %>%
rowSums() %>%
max()
N_c = output[1, c("S_c", "I_c", "S_sea_c", "I_sea_c")] %>% sum()
dead_c = output[nrow(output), c("D_c","D_sea_c")] %>% sum()
c_N = output[nrow(output), c("S_c_N", "E_c_N", "I_c_N", "R_c_N")] %>% sum()
max_infected_c =  output[, c("E_c", "E_sea_c", "I_c","I_sea_c")] %>%
rowSums() %>%
max()
nb_adults = N_a + N_b + N_c - dead_a - dead_b - dead_c
nb_nestlings = a_N + b_N + c_N
nb_adults_equi = nb_adults + reaching.repro.prob * nb_nestlings
nb_infected_colonies =
sum(max_infected_a > 0,
max_infected_b > 0,
max_infected_c > 0)
infected_X_time = 0
for (t in 1:(length(output$time)-1)){
infected_X_time = infected_X_time +
output$I_sea_NB[t] * (output$time[t+1] - output$time[t])
}
return( data.frame(
nb_adults_equi = nb_adults_equi,
nb_infected_colonies = nb_infected_colonies,
infected_X_time = infected_X_time
))
}
summary_output(output)
time1 <- Sys.time()
output = gillespie_seir(
# Parameter of the taul-leap agorithm
tau = 0.05,
# Number of simu_adultlation days
total_time = 50,
# Initial conditions
initial_number_infected_breeders_A = 1,
initial_number_breeders_A = 100,
initial_number_breeders_B = 80,
initial_number_breeders_C = 20,
# Do we induce dispersion ?
induced_dispersal = T,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time = 4,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB = 40
)
time2 <- Sys.time()
time2 - time1
plot_seir(output_ = output)
time1 <- Sys.time()
output = gillespie_seir(
# Parameter of the taul-leap agorithm
tau = 0.05,
# Number of simu_adultlation days
total_time = 50,
# Initial conditions
initial_number_infected_breeders_A = 1,
initial_number_breeders_A = 100,
initial_number_breeders_B = 80,
initial_number_breeders_C = 20,
# Do we induce dispersion ?
induced_dispersal = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time = 4,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB = 40
)
time2 <- Sys.time()
time2 - time1
plot_seir(output_ = output)
summary_output(output)
time1 <- Sys.time()
output = gillespie_seir(
# Parameter of the taul-leap agorithm
tau = 0.05,
# Number of simu_adultlation days
total_time = 50,
# Initial conditions
initial_number_infected_breeders_A = 3,
initial_number_breeders_A = 100,
initial_number_breeders_B = 80,
initial_number_breeders_C = 20,
# Do we induce dispersion ?
induced_dispersal = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time = 4,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB = 40
)
time2 <- Sys.time()
time2 - time1
plot_seir(output_ = output)
summary_output = function(# Time series of all states
output,
# Probability of a nestling becoming a breeder
reaching.repro.prob = 0.3){
output = output[[1]]
N_a = output[1, c("S_a", "I_a", "S_sea_a", "I_sea_a")] %>% sum()
dead_a = output[nrow(output), c("D_a","D_sea_a")] %>% sum()
a_N = output[nrow(output), c("S_a_N", "E_a_N", "I_a_N", "R_a_N")] %>% sum()
max_infected_a =  output[, c("E_a", "E_sea_a", "I_a","I_sea_a")] %>%
rowSums() %>%
max()
N_b = output[1, c("S_b", "I_b", "S_sea_b", "I_sea_b")] %>% sum()
dead_b = output[nrow(output), c("D_b","D_sea_b")] %>% sum()
b_N = output[nrow(output), c("S_b_N", "E_b_N", "I_b_N", "R_b_N")] %>% sum()
max_infected_b =  output[, c("E_b", "E_sea_b", "I_b","I_sea_b")] %>%
rowSums() %>%
max()
N_c = output[1, c("S_c", "I_c", "S_sea_c", "I_sea_c")] %>% sum()
dead_c = output[nrow(output), c("D_c","D_sea_c")] %>% sum()
c_N = output[nrow(output), c("S_c_N", "E_c_N", "I_c_N", "R_c_N")] %>% sum()
max_infected_c =  output[, c("E_c", "E_sea_c", "I_c","I_sea_c")] %>%
rowSums() %>%
max()
nb_adults = N_a + N_b + N_c - dead_a - dead_b - dead_c
nb_nestlings = a_N + b_N + c_N
nb_adults_equi = nb_adults + reaching.repro.prob * nb_nestlings
nb_infected_colonies =
sum(max_infected_a > 0,
max_infected_b > 0,
max_infected_c > 0)
infected_X_time = 0
for (t in 1:(length(output$time)-1)){
infected_X_time = infected_X_time +
output$I_sea_NB[t] * (output$time[t+1] - output$time[t])
}
return( data.frame(
nb_adults_equi = nb_adults_equi,
nb_infected_colonies = nb_infected_colonies,
infected_X_time = infected_X_time
))
}
model_wrapper = function(
# Parameter of the taul-leap agorithm
tau_ = 0.05,
# Number of simu_adultlation days
total_time_ = 50,
# Do we induce dispersion ?
induced_dispersal_ = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic_ = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time_ = 4,
# Initial conditions
initial_number_infected_breeders_A_ = 3,
initial_number_breeders_A_ = 100,
initial_number_breeders_B_ = 80,
initial_number_breeders_C_ = 20,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA_ = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB_ = 40,
# Probability of a nestling becoming a breeder
reaching.repro.prob = 0.3){
output_ = gillespie_seir(
tau = tau_,
total_time = total_time_,
induced_dispersal = induced_dispersal_,
dispersal_stochactic = dispersal_stochactic_,
dispersal_reaction_time = dispersal_reaction_time_,
initial_number_infected_breeders_A = initial_number_infected_breeders_A_,
initial_number_breeders_A = initial_number_breeders_A_,
initial_number_breeders_B = initial_number_breeders_B_,
initial_number_breeders_C = initial_number_breeders_C_,
BETA = BETA_,
TIME_AT_SEA_NB = TIME_AT_SEA_NB_)
res = summary_output(output = output_)
return(res)
}
model_wrapper = function(
# Parameter of the taul-leap agorithm
tau_ = 0.05,
# Number of simu_adultlation days
total_time_ = 50,
# Do we induce dispersion ?
induced_dispersal_ = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic_ = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time_ = 4,
# Initial conditions
initial_number_infected_breeders_A_ = 3,
initial_number_breeders_A_ = 100,
initial_number_breeders_B_ = 80,
initial_number_breeders_C_ = 20,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA_ = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB_ = 40,
# Probability of a nestling becoming a breeder
reaching.repro.prob_ = 0.3){
output_ = gillespie_seir(
tau = tau_,
total_time = total_time_,
induced_dispersal = induced_dispersal_,
dispersal_stochactic = dispersal_stochactic_,
dispersal_reaction_time = dispersal_reaction_time_,
initial_number_infected_breeders_A = initial_number_infected_breeders_A_,
initial_number_breeders_A = initial_number_breeders_A_,
initial_number_breeders_B = initial_number_breeders_B_,
initial_number_breeders_C = initial_number_breeders_C_,
BETA = BETA_,
TIME_AT_SEA_NB = TIME_AT_SEA_NB_)
res = summary_output(output = output_, reaching.repro.prob = reaching.repro.prob)
return(res)
}
model_wrapper()
model_wrapper = function(
# Parameter of the taul-leap agorithm
tau_ = 0.05,
# Number of simu_adultlation days
total_time_ = 50,
# Do we induce dispersion ?
induced_dispersal_ = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic_ = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time_ = 4,
# Initial conditions
initial_number_infected_breeders_A_ = 3,
initial_number_breeders_A_ = 100,
initial_number_breeders_B_ = 80,
initial_number_breeders_C_ = 20,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA_ = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB_ = 40,
# Probability of a nestling becoming a breeder
reaching.repro.prob_ = 0.3){
output_ = gillespie_seir(
tau = tau_,
total_time = total_time_,
induced_dispersal = induced_dispersal_,
dispersal_stochactic = dispersal_stochactic_,
dispersal_reaction_time = dispersal_reaction_time_,
initial_number_infected_breeders_A = initial_number_infected_breeders_A_,
initial_number_breeders_A = initial_number_breeders_A_,
initial_number_breeders_B = initial_number_breeders_B_,
initial_number_breeders_C = initial_number_breeders_C_,
BETA = BETA_,
TIME_AT_SEA_NB = TIME_AT_SEA_NB_)
res = summary_output(output = output_, reaching.repro.prob = reaching.repro.prob_)
return(res)
}
model_wrapper()
model_wrapper(  # Parameter of the taul-leap agorithm
tau_ = 0.05,
# Number of simu_adultlation days
total_time_ = 50,
# Do we induce dispersion ?
induced_dispersal_ = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic_ = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time_ = 4,
# Initial conditions
initial_number_infected_breeders_A_ = 3,
initial_number_breeders_A_ = 100,
initial_number_breeders_B_ = 80,
initial_number_breeders_C_ = 20,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA_ = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB_ = 40,
# Probability of a nestling becoming a breeder
reaching.repro.prob_ = 0.3)
model_wrapper(  # Parameter of the taul-leap agorithm
tau_ = 0.05,
# Number of simu_adultlation days
total_time_ = 50,
# Do we induce dispersion ?
induced_dispersal_ = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic_ = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time_ = 4,
# Initial conditions
initial_number_infected_breeders_A_ = 3,
initial_number_breeders_A_ = 100,
initial_number_breeders_B_ = 80,
initial_number_breeders_C_ = 20,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA_ = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB_ = 40,
# Probability of a nestling becoming a breeder
reaching.repro.prob_ = 0.3)
model_wrapper(  # Parameter of the taul-leap agorithm
tau_ = 0.05,
# Number of simu_adultlation days
total_time_ = 50,
# Do we induce dispersion ?
induced_dispersal_ = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic_ = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time_ = 4,
# Initial conditions
initial_number_infected_breeders_A_ = 3,
initial_number_breeders_A_ = 100,
initial_number_breeders_B_ = 80,
initial_number_breeders_C_ = 20,
# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA_ = 0.02,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB_ = 40,
# Probability of a nestling becoming a breeder
reaching.repro.prob_ = 0.3)
