# Transmission rate from exposed individuals and from infectious individuals in a colony
BETA_,
# Time at sea before returning to a colony (non-breeders)
TIME_AT_SEA_NB_,
# Parameter of the tau-leap algorithm
tau_,
# Probability of a nestling becoming a breeder
reaching.repro.prob_){
response_list = data.frame()
for (i in 1:nb_iterations_){
output = gillespie_seir(induced_dispersal = induced_dispersal_,
dispersal_stochactic = dispersal_stochactic_,
dispersal_reaction_time = dispersal_reaction_time_,
initial_number_infected_breeders_A = initial_number_infected_breeders_A_,
initial_number_breeders_A = initial_number_breeders_A_,
initial_number_breeders_B = initial_number_breeders_B_,
initial_number_breeders_C = initial_number_breeders_C_,
TIME_AT_SEA_NB = TIME_AT_SEA_NB_,
BETA = BETA_,
total_time = total_time_,
tau = tau_)
response_list = rbind(response_list, summary_output(output, reaching.repro.prob_))
}
return(response_list)
}
# res = stat_model()
# res$nb_infected_colonies
# plot - scenario ----------------------------------------------
scenario_dt = function(beta_context,
time_at_sea_NB_context,
reaching.repro.prob,
tau = 0.1
){
no_stress =
stat_model(nb_iterations_ = 1,
induced_dispersal_ = F,
initial_number_infected_breeders_A_ = 0,
tau_ = tau,
BETA_ =  beta_context,
TIME_AT_SEA_NB_ = time_at_sea_NB_context,
reaching.repro.prob_ = reaching.repro.prob)
baseline_outbreak =
stat_model(induced_dispersal_ = F,
initial_number_infected_breeders_A_ = 1,
tau_ = tau,
BETA_ =  beta_context,
TIME_AT_SEA_NB_ = time_at_sea_NB_context,
reaching.repro.prob_ = reaching.repro.prob)
proactive_strategy =
stat_model(nb_iterations_ = 1,
induced_dispersal_ = T,
initial_number_infected_breeders_A_ = 0,
dispersal_stochactic_ = F,
tau_ = tau,
BETA_ =  beta_context,
TIME_AT_SEA_NB_ = time_at_sea_NB_context,
reaching.repro.prob_ = reaching.repro.prob)
proactive_strategy_toolate =
stat_model(induced_dispersal_ = T,
initial_number_infected_breeders_A_ = 1,
dispersal_stochactic_ = F,
tau_ = tau,
BETA_ =  beta_context,
TIME_AT_SEA_NB_ = time_at_sea_NB_context,
reaching.repro.prob_ = reaching.repro.prob)
reactive_strategy =
stat_model(induced_dispersal_ = T,
initial_number_infected_breeders_A_ = 1,
dispersal_stochactic_ = T,
dispersal_reaction_time_ = 2,
tau_ = tau,
BETA_ =  beta_context,
TIME_AT_SEA_NB_ = time_at_sea_NB_context,
reaching.repro.prob_ = reaching.repro.prob)
dt =
data.frame(
scenario = c(
rep("Healty site", nrow(no_stress)),
rep("Baseline outbreak",nrow(baseline_outbreak)),
rep("Proactive strategy",nrow(proactive_strategy)),
rep("Proactive strategy - Too late",nrow(proactive_strategy_toolate)),
rep("Reactive strategy",nrow(reactive_strategy))
),
equi.lost.survi.ad = c(
0,
no_stress$nb_adults_equi - baseline_outbreak$nb_adults_equi,
no_stress$nb_adults_equi - proactive_strategy$nb_adults_equi,
no_stress$nb_adults_equi - proactive_strategy_toolate$nb_adults_equi,
no_stress$nb_adults_equi - reactive_strategy$nb_adults_equi
),
nb_infected_colonies = c(
no_stress$nb_infected_colonies,
baseline_outbreak$nb_infected_colonies,
proactive_strategy$nb_infected_colonies,
proactive_strategy_toolate$nb_infected_colonies,
reactive_strategy$nb_infected_colonies
),
infected_X_time = c(
no_stress$infected_X_time,
baseline_outbreak$infected_X_time,
proactive_strategy$infected_X_time,
proactive_strategy_toolate$infected_X_time,
reactive_strategy$infected_X_time
)
) %>%
mutate(scenario = factor(scenario, levels = c("Healty site",
"Baseline outbreak",
"Proactive strategy",
"Proactive strategy - Too late",
"Reactive strategy")))
return(dt)
}
scenario_mean = function(dt){
equi.lost.survi.ad_mean = c(
no_stress = mean(dt[dt$scenario == "Healty site", c("equi.lost.survi.ad")]),
baseline_outbreak = mean(dt[dt$scenario == "Baseline outbreak", c("equi.lost.survi.ad")]),
proactive_strategy = mean(dt[dt$scenario == "Proactive strategy", c("equi.lost.survi.ad")]),
proactive_strategy_toolate = mean(dt[dt$scenario == "Proactive strategy - Too late", c("equi.lost.survi.ad")]),
reactive_strategy = mean(dt[dt$scenario == "Reactive strategy", c("equi.lost.survi.ad")])
)
infected_X_time_mean = c(
no_stress = mean(dt[dt$scenario == "Healty site", c("infected_X_time")]),
baseline_outbreak = mean(dt[dt$scenario == "Baseline outbreak", c("infected_X_time")]),
proactive_strategy = mean(dt[dt$scenario == "Proactive strategy", c("infected_X_time")]),
proactive_strategy_toolate = mean(dt[dt$scenario == "Proactive strategy - Too late", c("infected_X_time")]),
reactive_strategy = mean(dt[dt$scenario == "Reactive strategy", c("infected_X_time")])
)
nb_infected_colonies_mean = c(
no_stress = mean(dt[dt$scenario == "Healty site", c("nb_infected_colonies")]),
baseline_outbreak = mean(dt[dt$scenario == "Baseline outbreak", c("nb_infected_colonies")]),
proactive_strategy = mean(dt[dt$scenario == "Proactive strategy", c("nb_infected_colonies")]),
proactive_strategy_toolate = mean(dt[dt$scenario == "Proactive strategy - Too late", c("nb_infected_colonies")]),
reactive_strategy = mean(dt[dt$scenario == "Reactive strategy", c("nb_infected_colonies")])
)
dt_mean = data.frame(equi.lost.survi.ad_mean,
infected_X_time_mean,
nb_infected_colonies_mean)
return(dt_mean)
}
scenario_plot = function(dt,
BETA,
MOB,
REPRO){
dt_panel_5 = dt
sc_mean = scenario_mean(dt)
p_equi.survi.ad = ggplot()+
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Healty site")),
aes(x = scenario, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 2,
fill = "grey",
color = "white",
stackratio=0.05)+
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Baseline outbreak")),
aes(x = scenario, y = equi.lost.survi.ad),
fill = "grey",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy")),
aes(x = scenario, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 2,
fill = if (sc_mean["baseline_outbreak","equi.lost.survi.ad_mean"]
>sc_mean["proactive_strategy","equi.lost.survi.ad_mean"]) "lightgreen"
else "darksalmon",
color = "white",
stackratio=0.05)+
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy - Too late")),
aes(x = scenario, y = equi.lost.survi.ad),
fill = if (sc_mean["baseline_outbreak","equi.lost.survi.ad_mean"]
>sc_mean["proactive_strategy_toolate","equi.lost.survi.ad_mean"]) "lightgreen"
else "darksalmon",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Reactive strategy")),
aes(x = scenario, y = equi.lost.survi.ad),
fill = if (sc_mean["baseline_outbreak","equi.lost.survi.ad_mean"]
>sc_mean["reactive_strategy","equi.lost.survi.ad_mean"]) "lightgreen"
else "darksalmon",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy - Too late")),
aes(x = scenario, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 0.5,
color = "darkgrey", alpha = 0.5,
stackratio=0.25)+
geom_dotplot(data = dt_panel_5 %>% subset(., !(scenario %in% c("Proactive strategy - Too late"))),
aes(x = scenario, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 0.5,
color = "darkgrey", alpha = 0.5,
stackratio=0.45)+
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Healty site", "Proactive strategy")),
aes(x = scenario, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 0.5,
fill = "antiquewhite4",
color = "antiquewhite4",
stackratio=0.05)+
ggthemes::theme_clean() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, NA)+
labs(x = "Scenario", y = "ENSA")
p_infected_X_time = ggplot()+
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Healty site")),
aes(x = scenario, y = infected_X_time),
binaxis='y', stackdir='center',
dotsize = 2,
fill = "grey",
color = "white",
stackratio=0.05)+
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Baseline outbreak")),
aes(x = scenario, y = infected_X_time),
fill = "grey",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy")),
aes(x = scenario, y = infected_X_time),
binaxis='y', stackdir='center',
dotsize = 2,
fill = if (sc_mean["baseline_outbreak","infected_X_time_mean"]
>sc_mean["proactive_strategy","infected_X_time_mean"]) "lightgreen"
else "darksalmon",
color = "white",
stackratio=0.05)+
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy - Too late")),
aes(x = scenario, y = infected_X_time),
fill = if (sc_mean["baseline_outbreak","infected_X_time_mean"]
>sc_mean["proactive_strategy_toolate","infected_X_time_mean"]) "lightgreen"
else "darksalmon",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Reactive strategy")),
aes(x = scenario, y = infected_X_time),
fill = if (sc_mean["baseline_outbreak","infected_X_time_mean"]
>sc_mean["reactive_strategy","infected_X_time_mean"]) "lightgreen"
else "darksalmon",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5 %>% subset(., !(scenario %in% c("Proactive strategy - Too late"))),
aes(x = scenario, y = infected_X_time),
binaxis='y', stackdir='center',
dotsize = 0.5,
color = "darkgrey", alpha = 0.5,
stackratio=0.5)+
geom_dotplot(data = dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy - Too late")),
aes(x = scenario, y = infected_X_time),
binaxis='y', stackdir='center',
dotsize = 0.5,
color = "darkgrey", alpha = 0.55,
stackratio=0.15)+
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Healty site", "Proactive strategy")),
aes(x = scenario, y = infected_X_time),
binaxis='y', stackdir='center',
dotsize = 0.5,
fill = "antiquewhite4",
color = "antiquewhite4",
stackratio=0.05)+
ggthemes::theme_clean() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, NA)+
labs(x = "Scenario", y = "Infected x Time")
p_nb_infected_colonies = ggplot()+
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Healty site")),
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
dotsize = 2,
fill = "grey",
color = "white",
stackratio=0.05)+
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Baseline outbreak")),
aes(x = scenario, y = nb_infected_colonies),
fill = "grey",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy")),
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
dotsize = 2,
fill = if (sc_mean["baseline_outbreak","nb_infected_colonies_mean"]
>sc_mean["proactive_strategy","nb_infected_colonies_mean"]) "lightgreen"
else "darksalmon",
color = "white",
stackratio=0.05)+
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy - Too late")),
aes(x = scenario, y = nb_infected_colonies),
fill = if (sc_mean["baseline_outbreak","nb_infected_colonies_mean"]
>sc_mean["proactive_strategy_toolate","nb_infected_colonies_mean"]) "lightgreen"
else "darksalmon",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Reactive strategy")),
aes(x = scenario, y = nb_infected_colonies),
fill = if (sc_mean["baseline_outbreak","nb_infected_colonies_mean"]
>sc_mean["reactive_strategy","nb_infected_colonies_mean"]) "lightgreen"
else "darksalmon",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5, aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
dotsize = 0.5,
color = "darkgrey", alpha = 0.5,
stackratio=0.25)+
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Healty site", "Proactive strategy")),
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
dotsize = 0.5,
fill = "antiquewhite4",
color = "antiquewhite4",
stackratio=0.05)+
ggthemes::theme_clean() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, NA)+
labs(x = "Scenario", y = "Infected colonies")
p = plot_grid(p_equi.survi.ad,
p_infected_X_time,
p_nb_infected_colonies,
labels = c("A", "B", "C"),
ncol = 3)
final_plot <- ggdraw() +
draw_label(paste0("beta = ", as.character(BETA),
"   mob = ", as.character(MOB),
"   repro = ", as.character(REPRO)
),
fontface = 'bold',
x = 0.5, y = 0.97) +
draw_plot(p, y = -0.05, height = 1)
print(final_plot)
}
# dt = scenario_dt(beta_context = 0.5,
#                  time_at_sea_NB_context = 40,
#                  reaching.repro.prob = 0.3)
#
# scenario_plot(dt,
#               BETA = 4,
#               MOB = 8,
#               REPRO = 8)
# beta_bank = c(0.02, 0.05, 0.5)
# mob_bank = c(2, 5, 20)
# repro_bank = c(0.3, 0.6, 0.9)
#
# for (beta in beta_bank){
#   for (mob in mob_bank){
#     for (repro in repro_bank){
#
#       dt = scenario_dt(beta_context = 0.5,
#                        time_at_sea_NB_context = 40,
#                        reaching.repro.prob = 0.3)
#       scenario_plot(dt,
#                     BETA = beta,
#                     MOB = mob,
#                     REPRO = repro)
#
#     }
#   }
# }
scenario_plot2 = function(dt,
BETA,
MOB,
REPRO){
dt_panel_5 = dt %>%
mutate(scenario_short = recode(scenario,
"Healty site" = "HS",
"Baseline outbreak" = "BO",
"Proactive strategy" = "PS",
"Proactive strategy - Too late" = "P2",
"Reactive strategy" = "RS"))
sc_mean = scenario_mean(dt)
p_equi.survi.ad = ggplot()+
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Healty site")),
aes(x = scenario_short, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 2,
fill = "grey",
color = "white",
stackratio=0.05)+
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Baseline outbreak")),
aes(x = scenario_short, y = equi.lost.survi.ad),
fill = "grey",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy")),
aes(x = scenario_short, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 2,
fill = if (sc_mean["baseline_outbreak","equi.lost.survi.ad_mean"]
>sc_mean["proactive_strategy","equi.lost.survi.ad_mean"]) "lightgreen"
else "darksalmon",
color = "white",
stackratio=0.05)+
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy - Too late")),
aes(x = scenario_short, y = equi.lost.survi.ad),
fill = if (sc_mean["baseline_outbreak","equi.lost.survi.ad_mean"]
>sc_mean["proactive_strategy_toolate","equi.lost.survi.ad_mean"]) "lightgreen"
else "darksalmon",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_violin(data = dt_panel_5 %>% subset(., scenario %in% c("Reactive strategy")),
aes(x = scenario_short, y = equi.lost.survi.ad),
fill = if (sc_mean["baseline_outbreak","equi.lost.survi.ad_mean"]
>sc_mean["reactive_strategy","equi.lost.survi.ad_mean"]) "lightgreen"
else "darksalmon",
color = "white",
scale = "width",
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5 %>% subset(., scenario %in% c("Proactive strategy - Too late")),
aes(x = scenario_short, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 0.5,
color = "darkgrey", alpha = 0.5,
stackratio=0.25)+
geom_dotplot(data = dt_panel_5 %>% subset(., !(scenario %in% c("Proactive strategy - Too late"))),
aes(x = scenario_short, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 0.5,
color = "darkgrey", alpha = 0.5,
stackratio=0.45)+
geom_dotplot(data =  dt_panel_5 %>% subset(., scenario %in% c("Healty site", "Proactive strategy")),
aes(x = scenario_short, y = equi.lost.survi.ad),
binaxis='y', stackdir='center',
dotsize = 0.5,
fill = "antiquewhite4",
color = "antiquewhite4",
stackratio=0.05)+
ggthemes::theme_clean() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, NA)+
labs(x = paste0("beta = ", as.character(BETA),
"  mob = ", as.character(MOB),
"  repro = ", as.character(REPRO)),
y = "ENSA")
print(p_equi.survi.ad)
}
# dt_ = scenario_dt(beta_context = 0.5,
#                   time_at_sea_NB_context = 4,
#                   reaching.repro.prob = 0.5)
#
# pp = scenario_plot2(dt = dt_,
#               BETA = 4,
#               MOB = 8,
#               REPRO = 8)
beta_bank = c(0.02, 0.05, 0.8)
mob_bank = c(2, 5, 40)
repro_bank = c(0.3, 0.5, 0.7)
plots <- list()
i = 0
for (beta in beta_bank){
for (mob in mob_bank){
#for (repro in repro_bank){
i = i + 1
dt_ = scenario_dt(beta_context = beta,
time_at_sea_NB_context = mob,
reaching.repro.prob = 0.5)
plots[[i]] <- scenario_plot2(dt = dt_,
BETA = beta,
MOB = mob,
REPRO = 0.5)
# }
}
}
# Utiliser grid.arrange pour afficher les quatre graphiques ensemble
p9 = grid.arrange(grobs = plots, ncol = 3, nrow = 3)
equi.lost.survi.ad
dt
