if (partner == "S_c"){
S_c = S_c - 1
S_c_NB = S_c_NB + 1
} else if (partner == "E_c"){
E_c = E_c - 1
E_c_NB = E_c_NB + 1
} else if (partner == "I_c"){
I_c = I_c - 1
I_c_NB = I_c_NB + 1
} else if (partner == "R_c"){
R_c = R_c - 1
R_c_NB = R_c_NB + 1
} else if (partner == "S_sea_c"){
S_sea_c = S_sea_c - 1
S_sea_NB = S_sea_NB + 1
} else if (partner == "E_sea_c"){
E_sea_c = E_sea_c - 1
E_sea_NB = E_sea_NB + 1
} else if (partner == "I_sea_c"){
I_sea_c = I_sea_c - 1
I_sea_NB = I_sea_NB + 1
} else if (partner == "R_sea_c"){
R_sea_c = R_sea_c - 1
R_sea_NB = R_sea_NB + 1
}
## Non-Breeders
### In colony A
} else if (transition == "S_a_NB_to_E_a_NB" & S_a_NB > 0) {
S_a_NB = S_a_NB - 1
E_a_NB = E_a_NB + 1
} else if (transition == "E_a_NB_to_S_a_NB" & E_a_NB > 0) {
E_a_NB = E_a_NB - 1
S_a_NB = S_a_NB + 1
} else if (transition == "E_a_NB_to_I_a_NB" & E_a_NB > 0) {
E_a_NB = E_a_NB - 1
I_a_NB = I_a_NB + 1
} else if (transition == "I_a_NB_to_R_a_NB" & I_a_NB > 0) {
I_a_NB = I_a_NB - 1
R_a_NB = R_a_NB + 1
} else if (transition == "I_a_NB_to_D_a_NB" & I_a_NB > 0) {
I_a_NB = I_a_NB - 1
D_a_NB = D_a_NB + 1
### In colony B
} else if (transition == "S_b_NB_to_E_b_NB" & S_b_NB > 0) {
S_b_NB = S_b_NB - 1
E_b_NB = E_b_NB + 1
} else if (transition == "E_b_NB_to_S_b_NB" & E_b_NB > 0) {
E_b_NB = E_b_NB - 1
S_b_NB = S_b_NB + 1
} else if (transition == "E_b_NB_to_I_b_NB" & E_b_NB > 0) {
E_b_NB = E_b_NB - 1
I_b_NB = I_b_NB + 1
} else if (transition == "I_b_NB_to_R_b_NB" & I_b_NB > 0) {
I_b_NB = I_b_NB - 1
R_b_NB = R_b_NB + 1
} else if (transition == "I_b_NB_to_D_b_NB" & I_b_NB > 0) {
I_b_NB = I_b_NB - 1
D_b_NB = D_b_NB + 1
### In colony C
} else if (transition == "S_c_NB_to_E_c_NB" & S_c_NB > 0) {
S_c_NB = S_c_NB - 1
E_c_NB = E_c_NB + 1
} else if (transition == "E_c_NB_to_S_c_NB" & E_c_NB > 0) {
E_c_NB = E_c_NB - 1
S_c_NB = S_c_NB + 1
} else if (transition == "E_c_NB_to_I_c_NB" & E_c_NB > 0) {
E_c_NB = E_c_NB - 1
I_c_NB = I_c_NB + 1
} else if (transition == "I_c_NB_to_R_c_NB" & I_c_NB > 0) {
I_c_NB = I_c_NB - 1
R_c_NB = R_c_NB + 1
} else if (transition == "I_c_NB_to_D_c_NB" & I_c_NB > 0) {
I_c_NB = I_c_NB - 1
D_c_NB = D_c_NB + 1
### At sea
} else if (transition == "S_sea_NB_to_E_sea_NB" & S_sea_NB > 0) {
S_sea_NB = S_sea_NB - 1
E_sea_NB = E_sea_NB + 1
} else if (transition == "E_sea_NB_to_S_sea_NB" & E_sea_NB > 0) {
E_sea_NB = E_sea_NB - 1
S_sea_NB = S_sea_NB + 1
} else if (transition == "E_sea_NB_to_I_sea_NB" & E_sea_NB > 0) {
E_sea_NB = E_sea_NB - 1
I_sea_NB = I_sea_NB + 1
} else if (transition == "I_sea_NB_to_R_sea_NB" & I_sea_NB > 0) {
I_sea_NB = I_sea_NB - 1
R_sea_NB = R_sea_NB + 1
} else if (transition == "I_sea_NB_to_D_sea_NB" & I_sea_NB > 0) {
I_sea_NB = I_sea_NB - 1
D_sea_NB = D_sea_NB + 1
# Mobility
## Breeders
### From colony A to sea A
} else if (transition == "S_a_to_S_sea_a"  & S_a > 0) {
S_a = S_a - 1
S_sea_a = S_sea_a + 1
} else if (transition == "E_a_to_E_sea_a"  & E_a > 0) {
E_a = E_a - 1
E_sea_a = E_sea_a + 1
} else if (transition == "I_a_to_I_sea_a"  & I_a > 0) {
I_a = I_a - 1
I_sea_a = I_sea_a + 1
} else if (transition == "R_a_to_R_sea_a"  & R_a > 0) {
R_a = R_a - 1
R_sea_a = R_sea_a + 1
### From sea A to colony A
}else if (transition == "S_sea_a_to_S_a"  & S_sea_a > 0) {
S_a = S_a + 1
S_sea_a = S_sea_a - 1
} else if (transition == "E_sea_a_to_E_a"  & E_sea_a > 0) {
E_a = E_a + 1
E_sea_a = E_sea_a - 1
} else if (transition == "I_sea_a_to_I_a"  & I_sea_a > 0) {
I_a = I_a + 1
I_sea_a = I_sea_a - 1
} else if (transition == "R_sea_a_to_R_a" & R_sea_a > 0) {
R_a = R_a + 1
R_sea_a = R_sea_a - 1
### From colony B to sea B
} else if (transition == "S_b_to_S_sea_b"  & S_b > 0) {
S_b = S_b - 1
S_sea_b = S_sea_b + 1
} else if (transition == "E_b_to_E_sea_b"  & E_b > 0) {
E_b = E_b - 1
E_sea_b = E_sea_b + 1
} else if (transition == "I_b_to_I_sea_b"  & I_b > 0) {
I_b = I_b - 1
I_sea_b = I_sea_b + 1
} else if (transition == "R_b_to_R_sea_b"  & R_b > 0) {
R_b = R_b - 1
R_sea_b = R_sea_b + 1
### From sea B to colony B
} else if (transition == "S_sea_b_to_S_b" & S_sea_b > 0) {
S_b = S_b + 1
S_sea_b = S_sea_b - 1
} else if (transition == "E_sea_b_to_E_b" & E_sea_b > 0) {
E_b = E_b + 1
E_sea_b = E_sea_b - 1
} else if (transition == "I_sea_b_to_I_b" & I_sea_b > 0) {
I_b = I_b + 1
I_sea_b = I_sea_b - 1
} else if (transition == "R_sea_b_to_R_b" & R_sea_b > 0) {
R_b = R_b + 1
R_sea_b = R_sea_b - 1
### From colony C to sea C
} else if (transition == "S_c_to_S_sea_c"  & S_c > 0) {
S_c = S_c - 1
S_sea_c = S_sea_c + 1
} else if (transition == "E_c_to_E_sea_c"  & E_c > 0) {
E_c = E_c - 1
E_sea_c = E_sea_c + 1
} else if (transition == "I_c_to_I_sea_c"  & I_c > 0) {
I_c = I_c - 1
I_sea_c = I_sea_c + 1
} else if (transition == "R_c_to_R_sea_c"  & R_c > 0) {
R_c = R_c - 1
R_sea_c = R_sea_c + 1
### From sea C to colony C
} else if (transition == "S_sea_c_to_S_c" & S_sea_c > 0) {
S_c = S_c + 1
S_sea_c = S_sea_c - 1
} else if (transition == "E_sea_c_to_E_c" & E_sea_c > 0) {
E_c = E_c + 1
E_sea_c = E_sea_c - 1
} else if (transition == "I_sea_c_to_I_c" & I_sea_c > 0) {
I_c = I_c + 1
I_sea_c = I_sea_c - 1
} else if (transition == "R_sea_c_to_R_c" & R_sea_c > 0) {
R_c = R_c + 1
R_sea_c = R_sea_c - 1
## Non-Breeders
### From colony A to sea
} else if (transition == "S_a_NB_to_S_sea_NB" & S_a_NB > 0) {
S_a_NB = S_a_NB - 1
S_sea_NB = S_sea_NB + 1
} else if (transition == "E_a_NB_to_E_sea_NB" & E_a_NB > 0) {
E_a_NB = E_a_NB - 1
E_sea_NB = E_sea_NB + 1
} else if (transition == "I_a_NB_to_I_sea_NB" & I_a_NB > 0) {
I_a_NB = I_a_NB - 1
I_sea_NB = I_sea_NB + 1
} else if (transition == "R_a_NB_to_R_sea_NB" & R_a_NB > 0) {
R_a_NB = R_a_NB - 1
R_sea_NB = R_sea_NB + 1
### From sea to colony A
}else if (transition == "S_sea_NB_to_S_a_NB" & S_sea_NB > 0) {
S_a_NB = S_a_NB + 1
S_sea_NB = S_sea_NB - 1
} else if (transition == "E_sea_NB_to_E_a_NB" & E_sea_NB > 0) {
E_a_NB = E_a_NB + 1
E_sea_NB = E_sea_NB - 1
} else if (transition == "I_sea_NB_to_I_a_NB" & I_sea_NB > 0) {
I_a_NB = I_a_NB + 1
I_sea_NB = I_sea_NB - 1
} else if (transition == "R_sea_NB_to_R_a_NB" & R_sea_NB > 0) {
R_a_NB = R_a_NB + 1
R_sea_NB = R_sea_NB - 1
### From colony B to sea
} else if (transition == "S_b_NB_to_S_sea_NB" & S_b_NB > 0) {
S_b_NB = S_b_NB - 1
S_sea_NB = S_sea_NB + 1
} else if (transition == "E_b_NB_to_E_sea_NB" & E_b_NB > 0) {
E_b_NB = E_b_NB - 1
E_sea_NB = E_sea_NB + 1
} else if (transition == "I_b_NB_to_I_sea_NB" & I_b_NB > 0) {
I_b_NB = I_b_NB - 1
I_sea_NB = I_sea_NB + 1
} else if (transition == "R_b_NB_to_R_sea_NB" & R_b_NB > 0) {
R_b_NB = R_b_NB - 1
R_sea_NB = R_sea_NB + 1
### From sea to colony B
} else if (transition == "S_sea_NB_to_S_b_NB" & S_sea_NB > 0) {
S_b_NB = S_b_NB + 1
S_sea_NB = S_sea_NB - 1
} else if (transition == "E_sea_NB_to_E_b_NB" & E_sea_NB > 0) {
E_b_NB = E_b_NB + 1
E_sea_NB = E_sea_NB - 1
} else if (transition == "I_sea_NB_to_I_b_NB" & I_sea_NB > 0) {
I_b_NB = I_b_NB + 1
I_sea_NB = I_sea_NB - 1
} else if (transition == "R_sea_NB_to_R_b_NB" & R_sea_NB > 0) {
R_b_NB = R_b_NB + 1
R_sea_NB = R_sea_NB - 1
### From colony C to sea
} else if (transition == "S_c_NB_to_S_sea_NB" & S_c_NB > 0) {
S_c_NB = S_c_NB - 1
S_sea_NB = S_sea_NB + 1
} else if (transition == "E_c_NB_to_E_sea_NB" & E_c_NB > 0) {
E_c_NB = E_c_NB - 1
E_sea_NB = E_sea_NB + 1
} else if (transition == "I_c_NB_to_I_sea_NB" & I_c_NB > 0) {
I_c_NB = I_c_NB - 1
I_sea_NB = I_sea_NB + 1
} else if (transition == "R_c_NB_to_R_sea_NB" & R_c_NB > 0) {
R_c_NB = R_c_NB - 1
R_sea_NB = R_sea_NB + 1
### From sea to colony C
} else if (transition == "S_sea_NB_to_S_c_NB" & S_sea_NB > 0) {
S_c_NB = S_c_NB + 1
S_sea_NB = S_sea_NB - 1
} else if (transition == "E_sea_NB_to_E_c_NB" & E_sea_NB > 0) {
E_c_NB = E_c_NB + 1
E_sea_NB = E_sea_NB - 1
} else if (transition == "I_sea_NB_to_I_c_NB" & I_sea_NB > 0) {
I_c_NB = I_c_NB + 1
I_sea_NB = I_sea_NB - 1
} else if (transition == "R_sea_NB_to_R_c_NB" & R_sea_NB > 0) {
R_c_NB = R_c_NB + 1
R_sea_NB = R_sea_NB - 1
# } else if (transition == "S_a_to_S_a_NB"  & S_a > 0) {
#   S_a = S_a - 2
#   S_a_NB = S_a_NB + 2
# } else if (transition == "E_a_to_E_a_NB" & E_a > 0) {
#   E_a = E_a - 2
#   E_a_NB = E_a_NB + 2
# } else if (transition == "I_a_to_I_a_NB" & I_a > 0) {
#   I_a = I_a - 2
#   I_a_NB = I_a_NB + 2
# } else if (transition == "E_a_to_E_a_NB" & R_a > 0) {
#   R_a = R_a - 2
#   R_a_NB = R_a_NB + 2
} # transition
} # for : transitions_bank
} # if : transitions_bank
new_state = matrix(data = c(S_a_N, E_a_N, I_a_N, R_a_N, D_a_N,
S_a, E_a, I_a, R_a, D_a,
S_sea_a, E_sea_a, I_sea_a, R_sea_a, D_sea_a,
S_a_NB, E_a_NB, I_a_NB, R_a_NB, D_a_NB,
S_b_N, E_b_N, I_b_N, R_b_N, D_b_N,
S_b, E_b, I_b, R_b, D_b,
S_sea_b, E_sea_b, I_sea_b, R_sea_b, D_sea_b,
S_b_NB, E_b_NB, I_b_NB, R_b_NB, D_b_NB,
S_c_N, E_c_N, I_c_N, R_c_N, D_c_N,
S_c, E_c, I_c, R_c, D_c,
S_sea_c, E_sea_c, I_sea_c, R_sea_c, D_sea_c,
S_c_NB, E_c_NB, I_c_NB, R_c_NB, D_c_NB,
S_sea_NB, E_sea_NB, I_sea_NB, R_sea_NB, D_sea_NB
),
nrow = 13, ncol = 5,
byrow = T)
states = abind(states, new_state)
} # while
all_states = data.frame(
time = times,
S_a_N = states[1, 1, ],
E_a_N = states[1, 2, ],
I_a_N = states[1, 3, ],
R_a_N = states[1, 4, ],
D_a_N = states[1, 5, ],
S_a = states[2, 1, ],
E_a = states[2, 2, ],
I_a = states[2, 3, ],
R_a = states[2, 4, ],
D_a = states[2, 5, ],
S_sea_a = states[3, 1, ],
E_sea_a = states[3, 2, ],
I_sea_a = states[3, 3, ],
R_sea_a = states[3, 4, ],
D_sea_a = states[3, 5, ],
S_a_NB = states[4, 1, ],
E_a_NB = states[4, 2, ],
I_a_NB = states[4, 3, ],
R_a_NB = states[4, 4, ],
D_a_NB = states[4, 5, ],
S_b_N = states[5, 1, ],
E_b_N = states[5, 2, ],
I_b_N = states[5, 3, ],
R_b_N = states[5, 4, ],
D_b_N = states[5, 5, ],
S_b = states[6, 1, ],
E_b = states[6, 2, ],
I_b = states[6, 3, ],
R_b = states[6, 4, ],
D_b = states[6, 5, ],
S_sea_b = states[7, 1, ],
E_sea_b = states[7, 2, ],
I_sea_b = states[7, 3, ],
R_sea_b = states[7, 4, ],
D_sea_b = states[7, 5, ],
S_b_NB = states[8, 1, ],
E_b_NB = states[8, 2, ],
I_b_NB = states[8, 3, ],
R_b_NB = states[8, 4, ],
D_b_NB = states[8, 5, ],
S_c_N = states[9, 1, ],
E_c_N = states[9, 2, ],
I_c_N = states[9, 3, ],
R_c_N = states[9, 4, ],
D_c_N = states[9, 5, ],
S_c = states[10, 1, ],
E_c = states[10, 2, ],
I_c = states[10, 3, ],
R_c = states[10, 4, ],
D_c = states[10, 5, ],
S_sea_c = states[11, 1, ],
E_sea_c = states[11, 2, ],
I_sea_c = states[11, 3, ],
R_sea_c = states[11, 4, ],
D_sea_c = states[11, 5, ],
S_c_NB = states[12, 1, ],
E_c_NB = states[12, 2, ],
I_c_NB = states[12, 3, ],
R_c_NB = states[12, 4, ],
D_c_NB = states[12, 5, ],
S_sea_NB = states[13, 1, ],
E_sea_NB = states[13, 2, ],
I_sea_NB = states[13, 3, ],
R_sea_NB = states[13, 4, ],
D_sea_NB = states[13, 5, ]
) %>%
mutate(
S_a_total = S_a + S_sea_a,
E_a_total = E_a + E_sea_a,
I_a_total = I_a + I_sea_a,
R_a_total = R_a + R_sea_a,
D_a_total = D_a + D_sea_a,
S_b_total = S_b + S_sea_b,
E_b_total = E_b + E_sea_b,
I_b_total = I_b + I_sea_b,
R_b_total = R_b + R_sea_b,
D_b_total = D_b + D_sea_b,
S_c_total = S_c + S_sea_c,
E_c_total = E_c + E_sea_c,
I_c_total = I_c + I_sea_c,
R_c_total = R_c + R_sea_c,
D_c_total = D_c + D_sea_c
)
output = list(all_states,
simulated_dispersal_date)
return(output)
} # function
# Plot results
plot_seir = function(output_){
output_1 = output_[[1]]
output_2 = output_[[2]]
output_long = melt(output_1[1:nrow(output_1)-1, ], id = "time")
# In A
output_a = output_long %>% filter(variable %in% c("S_a_total", "E_a_total", "I_a_total", "R_a_total", "D_a_total"))
plot_a = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in A (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a$value == 0)) 1 else NA)
output_a_N = output_long %>% filter(variable %in% c("S_a_N", "E_a_N", "I_a_N", "R_a_N", "D_a_N"))
plot_a_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a_N$value == 0)) 1 else NA)
output_a_NB = output_long %>% filter(variable %in% c("S_a_NB", "E_a_NB", "I_a_NB", "R_a_NB", "D_a_NB"))
plot_a_NB =  ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_a_NB$value == 0)) 1 else NA)
# In B
output_b = output_long %>% filter(variable %in% c("S_b_total", "E_b_total", "I_b_total", "R_b_total", "D_b_total"))
plot_b = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in B (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b$value == 0)) 1 else NA)
output_b_N = output_long %>% filter(variable %in% c("S_b_N", "E_b_N", "I_b_N", "R_b_N", "D_b_N"))
plot_b_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b_N$value == 0)) 1 else NA)
output_b_NB = output_long %>% filter(variable %in% c("S_b_NB", "E_b_NB", "I_b_NB", "R_b_NB", "D_b_NB"))
plot_b_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_b_NB$value == 0)) 1 else NA)
# In C
output_c = output_long %>% filter(variable %in% c("S_c_total", "E_c_total", "I_c_total", "R_c_total", "D_c_total"))
plot_c = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Breeders in C (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c$value == 0)) 1 else NA)
output_c_N = output_long %>% filter(variable %in% c("S_c_N", "E_c_N", "I_c_N", "R_c_N", "D_c_N"))
plot_c_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in C")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c_N$value == 0)) 1 else NA)
output_c_NB = output_long %>% filter(variable %in% c("S_c_NB", "E_c_NB", "I_c_NB", "R_c_NB", "D_c_NB"))
plot_c_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony C")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_c_NB$value == 0)) 1 else NA)
# At sea
output_sea_NB = output_long %>% filter(variable %in% c("S_sea_NB", "E_sea_NB", "I_sea_NB", "R_sea_NB", "D_sea_NB"))
plot_sea_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_sea_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Number of individuals", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder at sea")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
ylim(0, if (all(output_sea_NB$value == 0)) 1 else NA)
plot_grid_seir = plot_grid(plot_a, plot_a_N, plot_sea_NB,
plot_b, plot_b_N, plot_b_NB,
plot_c, plot_c_N, plot_c_NB,
labels = c("A", "B", "C",
"D", "E", "F",
"G", "H", "I"),
label_size = 12)
print(plot_grid_seir)
}
# Run simulation
time1 <- Sys.time()
output = gillespie_seir(
# All parameters
param = param,
# Do we induce dispersion ?
induced_dispersal = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic = T,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time = 2,
# Initial conditions
initial_number_infected_breeders_A = 1,
initial_number_breeders_A = 100,
initial_number_breeders_B = 100,
initial_number_breeders_C = 10,
# Number of simu_adultlation days
total_time = 30,
# Parameter of the taul-leap agorithm
tau = 0.05)
time2 <- Sys.time()
time2 - time1
plot_seir(output_ = output)
