} else if (transition == "S_a_to_S_a_NB") {
S_a = S_a - 2
S_a_NB = S_a_NB + 2
} else if (transition == "E_a_to_E_a_NB") {
E_a = E_a - 2
E_a_NB = E_a_NB + 2
} else if (transition == "I_a_to_I_a_NB") {
I_a = I_a - 2
I_a_NB = I_a_NB + 2
} else if (transition == "E_a_to_E_a_NB") {
R_a = R_a - 2
R_a_NB = R_a_NB + 2
} else if (transition == "S_sea_a_NB_to_S_sea_b_NB") {
S_sea_a_NB = S_sea_a_NB - 1
S_sea_b_NB = S_sea_b_NB + 1
}else if (transition == "E_sea_a_NB_to_E_sea_b_NB") {
E_sea_a_NB = E_sea_a_NB - 1
E_sea_b_NB = E_sea_b_NB + 1
}else if (transition == "I_sea_a_NB_to_I_sea_b_NB") {
I_sea_a_NB = I_sea_a_NB - 1
I_sea_b_NB = I_sea_b_NB + 1
}else if (transition == "R_sea_a_NB_to_R_sea_b_NB") {
R_sea_a_NB = R_sea_a_NB - 1
R_sea_b_NB = R_sea_b_NB + 1
}else if (transition == "S_a_N_to_E_a_N"){
S_a_N = S_a_N - 1
E_a_N = E_a_N + 1
}else if (transition == "E_a_N_to_S_a_N"){
E_a_N = E_a_N - 1
S_a_N = S_a_N + 1
}else if (transition == "E_a_N_to_I_a_N"){
E_a_N = E_a_N - 1
I_a_N = I_a_N + 1
}else if (transition == "I_a_N_to_R_a_N"){
I_a_N = I_a_N - 1
R_a_N = R_a_N + 1
}else if (transition == "I_a_N_to_R_a_N"){
I_a_N = I_a_N - 1
R_a_N = R_a_N + 1
}
# If a nestling dies, both parents become non-breeders.
else if (transition == "I_a_N_to_D_a_N"){
I_a_N = I_a_N - 1
D_a_N = D_a_N + 1
parent1 = sample(c(rep("S_a", S_a), rep("E_a", E_a),rep("I_a", I_a),rep("R_a", R_a),
rep("S_sea_a", S_a), rep("E_sea_a", E_a),rep("I_sea_a", I_a),rep("R_sea_a", R_a)),
size = 1)
if (parent1 == "S_a"){
S_a = S_a - 1
S_a_NB = S_a_NB + 1
} else if (parent1 == "E_a"){
E_a = E_a - 1
E_a_NB = E_a_NB + 1
} else if (parent1 == "I_a"){
I_a = I_a - 1
I_a_NB = I_a_NB + 1
} else if (parent1 == "R_a"){
R_a = R_a - 1
R_a_NB = R_a_NB + 1
} else if (parent1 == "S_sea_a"){
S_sea_a = S_sea_a - 1
S_sea_a_NB = S_sea_a_NB + 1
} else if (parent1 == "E_sea_a"){
E_sea_a = E_sea_a - 1
E_sea_a_NB = E_sea_a_NB + 1
} else if (parent1 == "I_sea_a"){
I_sea_a = I_sea_a - 1
I_sea_a_NB = I_sea_a_NB + 1
} else if (parent1 == "R_sea_a"){
R_sea_a = R_sea_a - 1
R_sea_a_NB = R_sea_a_NB + 1
}
parent2 = sample(c(rep("S_a", S_a), rep("E_a", E_a),rep("I_a", I_a),rep("R_a", R_a),
rep("S_sea_a", S_a), rep("E_sea_a", E_a),rep("I_sea_a", I_a),rep("R_sea_a", R_a)),
size = 1)
if (parent2 == "S_a"){
S_a = S_a - 1
S_a_NB = S_a_NB + 1
} else if (parent2 == "E_a"){
E_a = E_a - 1
E_a_NB = E_a_NB + 1
} else if (parent2 == "I_a"){
I_a = I_a - 1
I_a_NB = I_a_NB + 1
} else if (parent2 == "R_a"){
R_a = R_a - 1
R_a_NB = R_a_NB + 1
} else if (parent2 == "S_sea_a"){
S_sea_a = S_sea_a - 1
S_sea_a_NB = S_sea_a_NB + 1
} else if (parent2 == "E_sea_a"){
E_sea_a = E_sea_a - 1
E_sea_a_NB = E_sea_a_NB + 1
} else if (parent2 == "I_sea_a"){
I_sea_a = I_sea_a - 1
I_sea_a_NB = I_sea_a_NB + 1
} else if (parent2 == "R_sea_a"){
R_sea_a = R_sea_a - 1
R_sea_a_NB = R_sea_a_NB + 1
}
}else if (transition == "S_b_N_to_E_b_N"){
S_b_N = S_b_N - 1
E_b_N = E_b_N + 1
}else if (transition == "E_b_N_to_S_b_N"){
E_b_N = E_b_N - 1
S_b_N = S_b_N + 1
}else if (transition == "E_b_N_to_I_b_N"){
E_b_N = E_b_N - 1
I_b_N = I_b_N + 1
}else if (transition == "I_b_N_to_R_b_N"){
I_b_N = I_b_N - 1
R_b_N = R_b_N + 1
}else if (transition == "I_b_N_to_R_b_N"){
I_b_N = I_b_N - 1
R_b_N = R_b_N + 1
}else if (transition == "I_b_N_to_D_b_N"){
I_b_N = I_b_N - 1
D_b_N = D_b_N + 1
# If a nestling dies, both parents become non-breeders.
parent1 = sample(c(rep("S_b", S_b), rep("E_b", E_b),rep("I_b", I_b),rep("R_b", R_b),
rep("S_sea_b", S_b), rep("E_sea_b", E_b),rep("I_sea_b", I_b),rep("R_sea_b", R_b)),
size = 1)
if (parent1 == "S_b"){
S_b = S_b - 1
S_b_NB = S_b_NB + 1
} else if (parent1 == "E_b"){
E_b = E_b - 1
E_b_NB = E_b_NB + 1
} else if (parent1 == "I_b"){
I_b = I_b - 1
I_b_NB = I_b_NB + 1
} else if (parent1 == "R_b"){
R_b = R_b - 1
R_b_NB = R_b_NB + 1
} else if (parent1 == "S_sea_b"){
S_sea_b = S_sea_b - 1
S_sea_b_NB = S_sea_b_NB + 1
} else if (parent1 == "E_sea_b"){
E_sea_b = E_sea_b - 1
E_sea_b_NB = E_sea_b_NB + 1
} else if (parent1 == "I_sea_b"){
I_sea_b = I_sea_b - 1
I_sea_b_NB = I_sea_b_NB + 1
} else if (parent1 == "R_sea_b"){
R_sea_b = R_sea_b - 1
R_sea_b_NB = R_sea_b_NB + 1
}
parent2 = sample(c(rep("S_b", S_b), rep("E_b", E_b),rep("I_b", I_b),rep("R_b", R_b),
rep("S_sea_b", S_b), rep("E_sea_b", E_b),rep("I_sea_b", I_b),rep("R_sea_b", R_b)),
size = 1)
if (parent2 == "S_b"){
S_b = S_b - 1
S_b_NB = S_b_NB + 1
} else if (parent2 == "E_b"){
E_b = E_b - 1
E_b_NB = E_b_NB + 1
} else if (parent2 == "I_b"){
I_b = I_b - 1
I_b_NB = I_b_NB + 1
} else if (parent2 == "R_b"){
R_b = R_b - 1
R_b_NB = R_b_NB + 1
} else if (parent2 == "S_sea_b"){
S_sea_b = S_sea_b - 1
S_sea_b_NB = S_sea_b_NB + 1
} else if (parent2 == "E_sea_b"){
E_sea_b = E_sea_b - 1
E_sea_b_NB = E_sea_b_NB + 1
} else if (parent2 == "I_sea_b"){
I_sea_b = I_sea_b - 1
I_sea_b_NB = I_sea_b_NB + 1
} else if (parent2 == "R_sea_b"){
R_sea_b = R_sea_b - 1
R_sea_b_NB = R_sea_b_NB + 1
}
}
new_state = matrix(data = c(S_a, E_a, I_a, R_a, D_a,
S_sea_a, E_sea_a, I_sea_a, R_sea_a, D_sea_a,
S_sea_b, E_sea_b, I_sea_b, R_sea_b, D_sea_b,
S_b, E_b, I_b, R_b, D_b,
S_a_NB, E_a_NB, I_a_NB, R_a_NB, D_a_NB,
S_sea_a_NB, E_sea_a_NB, I_sea_a_NB, R_sea_a_NB, D_sea_a_NB,
S_sea_b_NB, E_sea_b_NB, I_sea_b_NB, R_sea_b_NB, D_sea_b_NB,
S_b_NB, E_b_NB, I_b_NB, R_b_NB, D_b_NB,
S_a_N, E_a_N, I_a_N, R_a_N, D_a_N,
S_b_N, E_b_N, I_b_N, R_b_N, D_b_N),
nrow = 10, ncol = 5,
byrow = T)
#print(new_state)
states = abind(states, new_state)
}
output = data.frame(
time = times,
S_a = states[1, 1, ],
E_a = states[1, 2, ],
I_a = states[1, 3, ],
R_a = states[1, 4, ],
D_a = states[1, 5, ],
S_sea_a = states[2, 1, ],
E_sea_a = states[2, 2, ],
I_sea_a = states[2, 3, ],
R_sea_a = states[2, 4, ],
D_sea_a = states[2, 5, ],
S_sea_b = states[3, 1, ],
E_sea_b = states[3, 2, ],
I_sea_b = states[3, 3, ],
R_sea_b = states[3, 4, ],
D_sea_b = states[3, 5, ],
S_b = states[4, 1, ],
E_b = states[4, 2, ],
I_b = states[4, 3, ],
R_b = states[4, 4, ],
D_b = states[4, 5, ],
S_a_NB = states[5, 1, ],
E_a_NB = states[5, 2, ],
I_a_NB = states[5, 3, ],
R_a_NB = states[5, 4, ],
D_a_NB = states[5, 5, ],
S_sea_a_NB = states[6, 1, ],
E_sea_a_NB = states[6, 2, ],
I_sea_a_NB = states[6, 3, ],
R_sea_a_NB = states[6, 4, ],
D_sea_a_NB = states[6, 5, ],
S_sea_b_NB = states[7, 1, ],
E_sea_b_NB = states[7, 2, ],
I_sea_b_NB = states[7, 3, ],
R_sea_b_NB = states[7, 4, ],
D_sea_b_NB = states[7, 5, ],
S_b_NB = states[8, 1, ],
E_b_NB = states[8, 2, ],
I_b_NB = states[8, 3, ],
R_b_NB = states[8, 4, ],
D_b_NB = states[8, 5, ],
S_a_N = states[9, 1, ],
E_a_N = states[9, 2, ],
I_a_N = states[9, 3, ],
R_a_N = states[9, 4, ],
D_a_N = states[9, 5, ],
S_b_N = states[10, 1, ],
E_b_N = states[10, 2, ],
I_b_N = states[10, 3, ],
R_b_N = states[10, 4, ],
D_b_N = states[10, 5, ]) %>%
mutate(
S_a_total = S_a + S_sea_a,
E_a_total = E_a + E_sea_a,
I_a_total = I_a + I_sea_a,
R_a_total = R_a + R_sea_a,
D_a_total = D_a + D_sea_a,
S_b_total = S_b + S_sea_b,
E_b_total = E_b + E_sea_b,
I_b_total = I_b + I_sea_b,
R_b_total = R_b + R_sea_b,
D_b_total = D_b + D_sea_b,
S_a_NB_total = S_a_NB + S_sea_a_NB,
E_a_NB_total = E_a_NB + E_sea_a_NB,
I_a_NB_total = I_a_NB + I_sea_a_NB,
R_a_NB_total = R_a_NB + R_sea_a_NB,
D_a_NB_total = D_a_NB + D_sea_a_NB,
S_b_NB_total = S_b_NB + S_sea_b_NB,
E_b_NB_total = E_b_NB + E_sea_b_NB,
I_b_NB_total = I_b_NB + I_sea_b_NB,
R_b_NB_total = R_b_NB + R_sea_b_NB,
D_b_NB_total = D_b_NB + D_sea_b_NB
)
return(output)
}
# Run simulation
output = gillespie_seir(param = param,
induced_dispersal = F,
initial_number_breeders_A = 50,
initial_number_infected_breeders_A = 1,
initial_number_breeders_B = 50,
total_time = 70,
dispersal_stochactic = T)
## Nestlings
## In colony A
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_A_N = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## Nestlings
## In colony B
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_B_N = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## Breeders
## In colony A
N = initial_number_breeders_A
initial_infected = initial_number_infected_breeders_A
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_A = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## At sea A
N = 50
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_sea_a = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## At sea B
N = 50
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_sea_b = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## In colony B
N = initial_number_breeders_B
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_B <- c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## Non-Breeders
## In colony A
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_A_NB = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## At sea A
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_sea_a_NB = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## At sea B
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_sea_b_NB = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## In colony B
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_B_NB <- c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
initial_state = matrix(data = c(initial_state_A,
initial_state_sea_a,
initial_state_sea_b,
initial_state_B,
initial_state_A_NB,
initial_state_sea_a_NB,
initial_state_sea_b_NB,
initial_state_B_NB,
initial_state_A_N,
initial_state_B_N),
nrow = 10, ncol = 5,
byrow = T)
beta_E_colony = param$beta[1,1]
beta_I_colony = param$beta[1,2]
sigma = param$sigma
eta = param$eta
gamma = param$gamma
mu = param$mu
zeta_to_colony = param$zeta_to_colony
zeta_to_sea = param$zeta_to_sea
psi = param$psi
rho_to_colony = param$rho_to_colony
rho_to_sea = param$rho_to_sea
prop_dispersal = param$prop_dispersal
prop_prospecting = param$prop_prospecting
dispersal_date = param$dispersal_date
dispersal_reaction_time = param$dispersal_reaction_time
hatching_date = param$hatching_date
# Initialization
times = c(0)
states = array(dim = c(10,5,1), data = initial_state)
already_dispersed = F
already_hatched = F
first_death = F
first_death_date = NA
S_a = states[1, 1, dim(states)[3]]
E_a = states[1, 2, dim(states)[3]]
I_a = states[1, 3, dim(states)[3]]
R_a = states[1, 4, dim(states)[3]]
D_a = states[1, 5, dim(states)[3]]
S_sea_a = states[2, 1, dim(states)[3]]
E_sea_a = states[2, 2, dim(states)[3]]
I_sea_a = states[2, 3, dim(states)[3]]
R_sea_a = states[2, 4, dim(states)[3]]
D_sea_a = states[2, 5, dim(states)[3]]
S_sea_b = states[3, 1, dim(states)[3]]
E_sea_b = states[3, 2, dim(states)[3]]
I_sea_b = states[3, 3, dim(states)[3]]
R_sea_b = states[3, 4, dim(states)[3]]
D_sea_b = states[3, 5, dim(states)[3]]
S_b = states[4, 1, dim(states)[3]]
E_b = states[4, 2, dim(states)[3]]
I_b = states[4, 3, dim(states)[3]]
R_b = states[4, 4, dim(states)[3]]
D_b = states[4, 5, dim(states)[3]]
S_a_NB = states[5, 1, dim(states)[3]]
E_a_NB = states[5, 2, dim(states)[3]]
I_a_NB = states[5, 3, dim(states)[3]]
R_a_NB = states[5, 4, dim(states)[3]]
D_a_NB = states[5, 5, dim(states)[3]]
S_sea_a_NB = states[6, 1, dim(states)[3]]
E_sea_a_NB = states[6, 2, dim(states)[3]]
I_sea_a_NB = states[6, 3, dim(states)[3]]
R_sea_a_NB = states[6, 4, dim(states)[3]]
D_sea_a_NB = states[6, 5, dim(states)[3]]
S_sea_b_NB = states[7, 1, dim(states)[3]]
E_sea_b_NB = states[7, 2, dim(states)[3]]
I_sea_b_NB = states[7, 3, dim(states)[3]]
R_sea_b_NB = states[7, 4, dim(states)[3]]
D_sea_b_NB = states[7, 5, dim(states)[3]]
S_b_NB = states[8, 1, dim(states)[3]]
E_b_NB = states[8, 2, dim(states)[3]]
I_b_NB = states[8, 3, dim(states)[3]]
R_b_NB = states[8, 4, dim(states)[3]]
D_b_NB = states[8, 5, dim(states)[3]]
S_a_N = states[9, 1, dim(states)[3]]
E_a_N = states[9, 2, dim(states)[3]]
I_a_N = states[9, 3, dim(states)[3]]
R_a_N = states[9, 4, dim(states)[3]]
D_a_N = states[9, 5, dim(states)[3]]
S_b_N = states[10, 1, dim(states)[3]]
E_b_N = states[10, 2, dim(states)[3]]
I_b_N = states[10, 3, dim(states)[3]]
R_b_N = states[10, 4, dim(states)[3]]
D_b_N = states[10, 5, dim(states)[3]]
# Rates of each possible event
rates = calculate_rates(beta_E_colony, beta_I_colony,
sigma,eta, gamma, mu,
zeta_to_colony, zeta_to_sea, psi, rho_to_colony, rho_to_sea,
prop_dispersal, prop_prospecting, dispersal_date,
hatching_date,
S_a, E_a, I_a, R_a, D_a,
S_sea_a, E_sea_a, I_sea_a, R_sea_a, D_sea_a,
S_sea_b, E_sea_b, I_sea_b, R_sea_b, D_sea_b,
S_b, E_b, I_b, R_b, D_b,
S_a_NB, E_a_NB, I_a_NB, R_a_NB, D_a_NB,
S_sea_a_NB, E_sea_a_NB, I_sea_a_NB, R_sea_a_NB, D_sea_a_NB,
S_sea_b_NB,  E_sea_b_NB, I_sea_b_NB, R_sea_b_NB, D_sea_b_NB,
S_b_NB, E_b_NB, I_b_NB, R_b_NB, D_b_NB,
S_a_N, E_a_N, I_a_N, R_a_N, D_a_N,
S_b_N, E_b_N, I_b_N, R_b_N, D_b_N)
rates
total_rate = sum(rates)
total_rate
time_step = rexp(1, total_rate)
time_step
time_step = rexp(1, total_rate)
next_time = times[length(times)] + time_step
times = c(times, next_time)
transition = sample(names(rates), 1, prob = rates / total_rate)
rates
total_rate
rates / total_rate
