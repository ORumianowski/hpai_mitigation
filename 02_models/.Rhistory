&
S_c_B + E_c_B + I_c_B + R_c_B + S_sea_c_B + E_sea_c_B + I_sea_c_B + R_sea_c_B  >= 2 # Presence of a pair
) {
E_c_B = E_c_B - 1
E_c_NB = E_c_NB + 1
# The nestling dies
if (S_c_N + E_c_N + I_c_N + R_c_N >= 1){
nestling = sample(c(rep("S_c_N", S_c_N), rep("E_c_N", E_c_N),rep("I_c_N", I_c_N),rep("R_c_N", R_c_N)),
size = 1)
if (nestling == "S_c_N"){
S_c_N = S_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "E_c_N"){
E_c_N = E_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "I_c_N"){
I_c_N = I_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "R_c_N"){
R_c_N = R_c_N - 1
D_c_N = D_c_N + 1
}
}
# The partner becomes a non-breeder
partner = sample(c(rep("S_c_B", S_c_B), rep("E_c_B", E_c_B),rep("I_c_B", I_c_B),rep("R_c_B", R_c_B),
rep("S_sea_c_B", S_sea_c_B), rep("E_sea_c_B", E_sea_c_B),rep("I_sea_c_B", I_sea_c_B),rep("R_sea_c_B", R_sea_c_B)),
size = 1)
if (partner == "S_c_B"){
S_c_B = S_c_B - 1
S_c_NB = S_c_NB + 1
} else if (partner == "E_c_B"){
E_c_B= E_c_B- 1
E_c_NB = E_c_NB + 1
} else if (partner == "I_c_B"){
I_c_B = I_c_B - 1
I_c_NB = I_c_NB + 1
} else if (partner == "R_c_B"){
R_c_B = R_c_B - 1
R_c_NB = R_c_NB + 1
} else if (partner == "S_sea_c_B"){
S_sea_c_B = S_sea_c_B - 1
S_sea_NB = S_sea_NB + 1
} else if (partner == "E_sea_c_B"){
E_sea_c_B = E_sea_c_B - 1
E_sea_NB = E_sea_NB + 1
} else if (partner == "I_sea_c_B"){
I_sea_c_B = I_sea_c_B - 1
I_sea_NB = I_sea_NB + 1
} else if (partner == "R_sea_c_B"){
R_sea_c_B = R_sea_c_B - 1
R_sea_NB = R_sea_NB + 1
}
# Status I
} else if (transition %in% c("I_c_B_to_I_c_NB")
&
I_c_B >= 1
&
S_c_B + E_c_B + I_c_B + R_c_B + S_sea_c_B + E_sea_c_B + I_sea_c_B + R_sea_c_B  >= 2 # Presence of a pair
) {
I_c_B = I_c_B - 1
I_c_NB = I_c_NB + 1
# The nestling dies
if (S_c_N + E_c_N + I_c_N + R_c_N >= 1){
nestling = sample(c(rep("S_c_N", S_c_N), rep("E_c_N", E_c_N),rep("I_c_N", I_c_N),rep("R_c_N", R_c_N)),
size = 1)
if (nestling == "S_c_N"){
S_c_N = S_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "E_c_N"){
E_c_N = E_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "I_c_N"){
I_c_N = I_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "R_c_N"){
R_c_N = R_c_N - 1
D_c_N = D_c_N + 1
}
}
# The partner becomes a non-breeder
partner = sample(c(rep("S_c_B", S_c_B), rep("E_c_B", E_c_B),rep("I_c_B", I_c_B),rep("R_c_B", R_c_B),
rep("S_sea_c_B", S_sea_c_B), rep("E_sea_c_B", E_sea_c_B),rep("I_sea_c_B", I_sea_c_B),rep("R_sea_c_B", R_sea_c_B)),
size = 1)
if (partner == "S_c_B"){
S_c_B = S_c_B - 1
S_c_NB = S_c_NB + 1
} else if (partner == "E_c_B"){
E_c_B= E_c_B- 1
E_c_NB = E_c_NB + 1
} else if (partner == "I_c_B"){
I_c_B = I_c_B - 1
I_c_NB = I_c_NB + 1
} else if (partner == "R_c_B"){
R_c_B = R_c_B - 1
R_c_NB = R_c_NB + 1
} else if (partner == "S_sea_c_B"){
S_sea_c_B = S_sea_c_B - 1
S_sea_NB = S_sea_NB + 1
} else if (partner == "E_sea_c_B"){
E_sea_c_B = E_sea_c_B - 1
E_sea_NB = E_sea_NB + 1
} else if (partner == "I_sea_c_B"){
I_sea_c_B = I_sea_c_B - 1
I_sea_NB = I_sea_NB + 1
} else if (partner == "R_sea_c_B"){
R_sea_c_B = R_sea_c_B - 1
R_sea_NB = R_sea_NB + 1
}
# Status R
} else if (transition %in% c("R_c_B_to_R_c_NB")
&
R_c_B >= 1
&
S_c_B + E_c_B + I_c_B + R_c_B + S_sea_c_B + E_sea_c_B + I_sea_c_B + R_sea_c_B  >= 2 # Presence of a pair
) {
R_c_B = R_c_B - 1
R_c_NB = R_c_NB + 1
# The nestling dies
if (S_c_N + E_c_N + I_c_N + R_c_N >= 1){
nestling = sample(c(rep("S_c_N", S_c_N), rep("E_c_N", E_c_N),rep("I_c_N", I_c_N),rep("R_c_N", R_c_N)),
size = 1)
if (nestling == "S_c_N"){
S_c_N = S_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "E_c_N"){
E_c_N = E_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "I_c_N"){
I_c_N = I_c_N - 1
D_c_N = D_c_N + 1
} else if (nestling == "R_c_N"){
R_c_N = R_c_N - 1
D_c_N = D_c_N + 1
}
}
# The partner becomes a non-breeder
partner = sample(c(rep("S_c_B", S_c_B), rep("E_c_B", E_c_B),rep("I_c_B", I_c_B),rep("R_c_B", R_c_B),
rep("S_sea_c_B", S_sea_c_B), rep("E_sea_c_B", E_sea_c_B),rep("I_sea_c_B", I_sea_c_B),rep("R_sea_c_B", R_sea_c_B)),
size = 1)
if (partner == "S_c_B"){
S_c_B = S_c_B - 1
S_c_NB = S_c_NB + 1
} else if (partner == "E_c_B"){
E_c_B= E_c_B- 1
E_c_NB = E_c_NB + 1
} else if (partner == "I_c_B"){
I_c_B = I_c_B - 1
I_c_NB = I_c_NB + 1
} else if (partner == "R_c_B"){
R_c_B = R_c_B - 1
R_c_NB = R_c_NB + 1
} else if (partner == "S_sea_c_B"){
S_sea_c_B = S_sea_c_B - 1
S_sea_NB = S_sea_NB + 1
} else if (partner == "E_sea_c_B"){
E_sea_c_B = E_sea_c_B - 1
E_sea_NB = E_sea_NB + 1
} else if (partner == "I_sea_c_B"){
I_sea_c_B = I_sea_c_B - 1
I_sea_NB = I_sea_NB + 1
} else if (partner == "R_sea_c_B"){
R_sea_c_B = R_sea_c_B - 1
R_sea_NB = R_sea_NB + 1
}
}
} # for : transitions_bank
} # if : transitions_bank
new_state = matrix(data = c(S_a_N, E_a_N, I_a_N, R_a_N, D_a_N,
S_a_B, E_a_B, I_a_B, R_a_B,  D_a_B,
S_sea_a_B, E_sea_a_B, I_sea_a_B, R_sea_a_B, D_sea_a_B,
S_a_NB, E_a_NB, I_a_NB, R_a_NB, D_a_NB,
S_b_N, E_b_N, I_b_N, R_b_N, D_b_N,
S_b_B, E_b_B, I_b_B, R_b_B, D_b_B,
S_sea_b_B, E_sea_b_B, I_sea_b_B, R_sea_b_B, D_sea_b_B,
S_b_NB, E_b_NB, I_b_NB, R_b_NB, D_b_NB,
S_c_N, E_c_N, I_c_N, R_c_N, D_c_N,
S_c_B, E_c_B, I_c_B, R_c_B, D_c_B,
S_sea_c_B, E_sea_c_B, I_sea_c_B, R_sea_c_B, D_sea_c_B,
S_c_NB, E_c_NB, I_c_NB, R_c_NB, D_c_NB,
S_sea_NB, E_sea_NB, I_sea_NB, R_sea_NB, D_sea_NB
),
nrow = 13, ncol = 5,
byrow = T)
states = abind(states, new_state)
} # while
all_states = data.frame(
time = times,
S_a_N = states[1, 1, ],
E_a_N = states[1, 2, ],
I_a_N = states[1, 3, ],
R_a_N = states[1, 4, ],
D_a_N = states[1, 5, ],
S_a_B = states[2, 1, ],
E_a_B= states[2, 2, ],
I_a_B = states[2, 3, ],
R_a_B = states[2, 4, ],
D_a_B = states[2, 5, ],
S_sea_a_B = states[3, 1, ],
E_sea_a_B = states[3, 2, ],
I_sea_a_B = states[3, 3, ],
R_sea_a_B = states[3, 4, ],
D_sea_a_B = states[3, 5, ],
S_a_NB = states[4, 1, ],
E_a_NB = states[4, 2, ],
I_a_NB = states[4, 3, ],
R_a_NB = states[4, 4, ],
D_a_NB = states[4, 5, ],
S_b_N = states[5, 1, ],
E_b_N = states[5, 2, ],
I_b_N = states[5, 3, ],
R_b_N = states[5, 4, ],
D_b_N = states[5, 5, ],
S_b_B = states[6, 1, ],
E_b_B = states[6, 2, ],
I_b_B = states[6, 3, ],
R_b_B = states[6, 4, ],
D_b_B = states[6, 5, ],
S_sea_b_B = states[7, 1, ],
E_sea_b_B = states[7, 2, ],
I_sea_b_B = states[7, 3, ],
R_sea_b_B = states[7, 4, ],
D_sea_b_B = states[7, 5, ],
S_b_NB = states[8, 1, ],
E_b_NB = states[8, 2, ],
I_b_NB = states[8, 3, ],
R_b_NB = states[8, 4, ],
D_b_NB = states[8, 5, ],
S_c_N = states[9, 1, ],
E_c_N = states[9, 2, ],
I_c_N = states[9, 3, ],
R_c_N = states[9, 4, ],
D_c_N = states[9, 5, ],
S_c_B = states[10, 1, ],
E_c_B = states[10, 2, ],
I_c_B = states[10, 3, ],
R_c_B = states[10, 4, ],
D_c_B = states[10, 5, ],
S_sea_c_B = states[11, 1, ],
E_sea_c_B = states[11, 2, ],
I_sea_c_B = states[11, 3, ],
R_sea_c_B = states[11, 4, ],
D_sea_c_B = states[11, 5, ],
S_c_NB = states[12, 1, ],
E_c_NB = states[12, 2, ],
I_c_NB = states[12, 3, ],
R_c_NB = states[12, 4, ],
D_c_NB = states[12, 5, ],
S_sea_NB = states[13, 1, ],
E_sea_NB = states[13, 2, ],
I_sea_NB = states[13, 3, ],
R_sea_NB = states[13, 4, ],
D_sea_NB = states[13, 5, ]
) %>%
mutate(
S_a_B_total = S_a_B + S_sea_a_B,
E_a_B_total = E_a_B+ E_sea_a_B,
I_a_B_total = I_a_B + I_sea_a_B,
R_a_B_total = R_a_B + R_sea_a_B,
D_a_B_total = D_a_B + D_sea_a_B,
S_b_B_total = S_b_B + S_sea_b_B,
E_b_B_total = E_b_B + E_sea_b_B,
I_b_B_total = I_b_B + I_sea_b_B,
R_b_B_total = R_b_B + R_sea_b_B,
D_b_B_total = D_b_B + D_sea_b_B,
S_c_B_total = S_c_B + S_sea_c_B,
E_c_B_total = E_c_B + E_sea_c_B,
I_c_B_total = I_c_B + I_sea_c_B,
R_c_B_total = R_c_B + R_sea_c_B,
D_c_B_total = D_c_B + D_sea_c_B
)
N_a = all_states[1, c("S_a_B", "I_a_B", "S_sea_a_B", "I_sea_a_B")] %>% sum()
dead_a = all_states[nrow(all_states), c("D_a_B","D_sea_a_B")] %>% sum()
a_N = all_states[nrow(all_states), c("S_a_N", "E_a_N", "I_a_N", "R_a_N")] %>% sum()
max_infected_a =  all_states[, c("E_a_B", "E_sea_a_B", "I_a_B","I_sea_a_B")] %>%
rowSums() %>%
max()
N_b = all_states[1, c("S_b_B", "I_b_B", "S_sea_b_B", "I_sea_b_B")] %>% sum()
dead_b = all_states[nrow(all_states), c("D_b_B","D_sea_b_B")] %>% sum()
b_N = all_states[nrow(all_states), c("S_b_N", "E_b_N", "I_b_N", "R_b_N")] %>% sum()
max_infected_b =  all_states[, c("E_b_B", "E_sea_b_B", "I_b_B","I_sea_b_B")] %>%
rowSums() %>%
max()
N_c = all_states[1, c("S_c_B", "I_c_B", "S_sea_c_B", "I_sea_c_B")] %>% sum()
dead_c = all_states[nrow(all_states), c("D_c_B","D_sea_c_B")] %>% sum()
c_N = all_states[nrow(all_states), c("S_c_N", "E_c_N", "I_c_N", "R_c_N")] %>% sum()
max_infected_c =  all_states[, c("E_c_B", "E_sea_c_B", "I_c_B","I_sea_c_B")] %>%
rowSums() %>%
max()
# Equivalent Number of Lost Adult (ENLA)
# ENLA = number of died adult + number of non-appearing nestling compared to the maximum possible (pairs/2)
nb_adults = dead_a + dead_b + dead_c
nb_nestlings = (N_a + N_b  + N_c)/2 - (a_N + b_N + c_N)
nb_adults_equi = nb_adults + reaching_repro_prob * nb_nestlings
# Number of infected colonies
nb_infected_colonies =
sum(max_infected_a > 0,
max_infected_b > 0,
max_infected_c > 0)
# Infected X time
infected_X_time = 0
for (t in 1:(length(all_states$time)-1)){
infected_X_time = infected_X_time +
all_states$I_sea_NB[t] * (all_states$time[t+1] - all_states$time[t])
}
output = list(all_states = all_states,
simulated_dispersal_date = simulated_dispersal_date,
nb_adults_equi = nb_adults_equi,
nb_infected_colonies = nb_infected_colonies,
infected_X_time = infected_X_time)
return(output)
} # function
# Function to plot the evolution of states --------------------------------
plot_seir = function(output_){
output_1 = output_[[1]]
output_2 = output_[[2]]
output_long = melt(output_1[1:nrow(output_1)-1, ], id = "time") %>%
mutate(value = as.integer(value))
# In A
output_a = output_long %>% filter(variable %in% c("S_a_B_total", "E_a_B_total", "I_a_B_total", "R_a_B_total", "D_a_B_total"))
plot_a = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Breeders in A (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_a$value == 0)) 1 else NA) +
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
output_a_N = output_long %>% filter(variable %in% c("S_a_N", "E_a_N", "I_a_N", "R_a_N", "D_a_N"))
plot_a_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_a_N$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
output_a_NB = output_long %>% filter(variable %in% c("S_a_NB", "E_a_NB", "I_a_NB", "R_a_NB", "D_a_NB"))
plot_a_NB =  ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_a_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony A")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_a_NB$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
# In B
output_b = output_long %>% filter(variable %in% c("S_b_B_total", "E_b_B_total", "I_b_B_total", "R_b_B_total", "D_b_B_total"))
plot_b = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Breeders in B (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_b$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
output_b_N = output_long %>% filter(variable %in% c("S_b_N", "E_b_N", "I_b_N", "R_b_N", "D_b_N"))
plot_b_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_b_N$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
output_b_NB = output_long %>% filter(variable %in% c("S_b_NB", "E_b_NB", "I_b_NB", "R_b_NB", "D_b_NB"))
plot_b_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_b_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony B")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_b_NB$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
# In C
output_c = output_long %>% filter(variable %in% c("S_c_B_total", "E_c_B_total", "I_c_B_total", "R_c_B_total", "D_c_B_total"))
plot_c = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Breeders in C (colony+sea)")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_c$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
output_c_N = output_long %>% filter(variable %in% c("S_c_N", "E_c_N", "I_c_N", "R_c_N", "D_c_N"))
plot_c_N = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c_N, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Nestlings in C")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_c_N$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
output_c_NB = output_long %>% filter(variable %in% c("S_c_NB", "E_c_NB", "I_c_NB", "R_c_NB", "D_c_NB"))
plot_c_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 ,linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_c_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder in colony C")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_c_NB$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
# At sea
output_sea_NB = output_long %>% filter(variable %in% c("S_sea_NB", "E_sea_NB", "I_sea_NB", "R_sea_NB", "D_sea_NB"))
plot_sea_NB = ggplot() +
geom_vline(xintercept = if (is.na(output_2)) 1 else output_2 , linetype= if (is.na(output_2)) "blank" else "dashed",
color = if (is.na(output_2)) "white" else "grey", linewidth=0.65) +
geom_line(data = output_sea_NB, aes(x = time, y = value, color = variable)) +
labs(x = "Time", y = "Indiv. Count", color = "Status") +
theme_minimal() +
ggtitle("Non-breeder at sea")+
scale_color_brewer(palette="Set2", labels = c("S", "E", "I", "R", "D"))+
# ylim(0, if (all(output_sea_NB$value == 0)) 1 else NA)+
scale_y_continuous(breaks = function(x) unique(floor(pretty(seq(min(x), (max(x) + 1) * 1.1)))))
plot_grid_seir = plot_grid(plot_a_N, plot_b_N, plot_c_N,
plot_a, plot_b, plot_c,
plot_a_NB, plot_b_NB, plot_c_NB,
NULL, plot_sea_NB, NULL,
labels = c("A", "B", "C",
"D", "E", "F",
"G", "H", "I",
" ", "J", " "),
label_size = 12,
ncol = 3)
print(plot_grid_seir)
}
# Run simulation ----------------------------------------------------------
time1 <- Sys.time()
output = gillespie_seir(
# Parameter of the taul-leap algorithm
tau = 0.10,
# Number of simulation days
total_time = 70,
# Do we induce dispersion ?
induced_dispersal = F,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochastic = T,
# Are there infected individuals at the start of the simulation?
initially_infected = T,
# Initial conditions
initial_number_infected_breeders_A = 5,
initial_number_infected_breeders_B = 0,
initial_number_infected_breeders_C = 0,
initial_number_breeders_A = 50,
initial_number_breeders_B = 80,
initial_number_breeders_C = 20,
# Induced dispersion parameters
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time = 5,
## Proportion of dispersed adults
prop_dispersal = 1,
## Date of induced dispersion (if deterministic)
dispersal_date = 0,
# Epidemiological parameters
## Transmission rate from exposed and infectious individuals in a colony
beta_E_colony = 0,
beta_I_colony = 0.8,
## Rate of progression from exposed to infectious (inverse of incubation period)
sigma = 1/1,
## Rate of progression from exposed to susceptible
eta =  0,
## Recovery rate (inverse of infectious period)
gamma = 1/6,
## Disease-related mortality rate
## Death probability = mu / (mu + gamma)
## Adult
mu_adult = 1/6 * (0.5/(1-0.5)), # 50% of mortality
## Nestling
mu_nestling = 1/6 * (0.8/(1-0.8)), # 80% of mortality
# Mobility  parameters
## Transition from colony to the sea (breeders)
zeta_to_sea = 1/2,
## Transition from sea to the colony (breeders)
zeta_to_colony = 1/2,
## Transition from colony to the sea (non-breeders)
rho_to_sea = 1/2,
## Transition from sea to the colony (non-breeders)
rho_to_colony = 1/2 ,
# Transition from breeder to non-breeder (reproductive failure)
psi = 1/500,
# Demographic parameters
## Hatching date of the chicks
hatching_date = 10,
## Hatching date standard deviation
hatching_sd = 3,
# Probability of a nestling becoming a breeder
reaching_repro_prob = 0.5
)
time2 <- Sys.time()
time2 - time1
plot_seir(output_ = output)
output$nb_adults_equi
output$nb_infected_colonies
output$infected_X_time
rates
