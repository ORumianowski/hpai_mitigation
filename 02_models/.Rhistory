data.frame(
x_mid = all_diff_results$BO_vs_HS$x_mid,
y_mid = all_diff_results$BO_vs_HS$y_mid,
BO_vs_RS = all_diff_results$BO_vs_RS$diff,
#BO_vs_PS = all_diff_results$BO_vs_PS$diff,
BO_vs_P2 = all_diff_results$BO_vs_P2$diff) %>%
mutate(
best_strat = apply(.[, 3:ncol(.)], 1, function(row) {
if (all(row < 0)) {
return("BO")  # Retourne "BO" si toutes les valeurs sont nÃ©gatives
} else {
return(colnames(.)[which.max(row) + 2])  # Retourne le nom de la colonne avec la valeur max
}
})
)
best_strat_dt
plot_heatmap_best_strat = function(data, params, param_ranges) {
p = ggplot(data) +
geom_tile(aes(x = x_mid, y = y_mid, fill = best_strat)
) +
theme_minimal() +
theme(panel.background = element_rect(fill = "lightgray", color = NA))+
labs(x = params[1], y = params[2], fill = "Best \n Strategy")
if (param_ranges[[params[1]]][[2]] == "logarithmic"){
p = p + scale_x_log10()
}
if (param_ranges[[params[2]]][[2]] == "logarithmic"){
p = p + scale_y_log10()
}
return(p)
}
plot_heatmap_best_strat(best_strat_dt,evaluated_parameter,param_ranges)
# Plot boxplots -----------------------------------------------------------
interval_size = 0.5
evaluated_parameter = "initial_number_infected_breeders_A"
boxplot_dt = simulation_dt  %>%
subset(., scenario == "P2")%>%
mutate(parameter = cut(
get(evaluated_parameter),
breaks = seq(
param_ranges[[evaluated_parameter]][[1]][[1]],
param_ranges[[evaluated_parameter]][[1]][[2]],
by = interval_size
),
include.lowest = TRUE
)) %>%
na.omit()
ggplot(boxplot_dt, aes(x = parameter, y = nb_adults_equi)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = evaluated_parameter, y = "ENLA")
library(rpart)				        # Popular decision tree algorithm
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
library(caret)
load("simulation_dt/simulation_dt_50_2.RData")
simulation_dt1 = simulation_dt
load("simulation_dt/simulation_dt_150_2.RData")
simulation_dt2 = simulation_dt
load("simulation_dt/simulation_dt_300_2.RData")
simulation_dt3 = simulation_dt
load("simulation_dt/simulation_dt_500_2.RData")
simulation_dt4 = simulation_dt
simulation_dt = rbind(simulation_dt1,
simulation_dt2,
simulation_dt3,
simulation_dt4)
selected_simulation_dt = simulation_dt %>% subset(., scenario == "BO")
model <- rpart(nb_adults_equi ~ beta_I_colony
+ reaching_repro_prob
+ rho_to_colony
+ initial_number_infected_breeders_A
+ dispersal_reaction_time,
data = selected_simulation_dt)
prp(model)
####################Caret with CV
train <- createDataPartition(selected_simulation_dt[,"nb_adults_equi"],p=0.70,list=FALSE) # nb_adults_equi is the "target" class
train
selected_simulation_dt[,"nb_adults_equi"]
####################Caret with CV
train <- createDataPartition(selected_simulation_dt,p=0.70,list=FALSE) # nb_adults_equi is the "target" class
####################Caret with CV
train <- createDataPartition(1:30,p=0.70,list=FALSE) # nb_adults_equi is the "target" class
train
####################Caret with CV
train <- createDataPartition(1:nrow(selected_simulation_dt),p=0.70,list=FALSE) # nb_adults_equi is the "target" class
train
selected_simulation_dt.trn <- selected_simulation_dt[train,] # Check with str that nrows of selected_simulation_dt.trn is 70% of the original "selected_simulation_dt"
selected_simulation_dt.tst <- selected_simulation_dt[-train,] # And this, just 30%
####################Caret with CV
train <- createDataPartition(1:nrow(selected_simulation_dt),p=0.80,list=FALSE) # nb_adults_equi is the "target" class
selected_simulation_dt.trn <- selected_simulation_dt[train,] # Check with str that nrows of selected_simulation_dt.trn is 70% of the original "selected_simulation_dt"
selected_simulation_dt.tst <- selected_simulation_dt[-train,] # And this, just 30%
ctrl  <- trainControl(method  = "cv",number  = 10)
ctrl
load("simulation_dt/simulation_dt_50_2.RData")
simulation_dt1 = simulation_dt
load("simulation_dt/simulation_dt_150_2.RData")
simulation_dt2 = simulation_dt
load("simulation_dt/simulation_dt_300_2.RData")
simulation_dt3 = simulation_dt
load("simulation_dt/simulation_dt_500_2.RData")
simulation_dt4 = simulation_dt
simulation_dt = rbind(simulation_dt1,
simulation_dt2,
simulation_dt3,
simulation_dt4)
####################Caret with CV
train <- createDataPartition(1:nrow(selected_simulation_dt),p=0.80,list=FALSE) # nb_adults_equi is the "target" class
selected_simulation_dt.trn <- selected_simulation_dt[train,] # Check with str that nrows of selected_simulation_dt.trn is 70% of the original "selected_simulation_dt"
selected_simulation_dt.tst <- selected_simulation_dt[-train,] # And this, just 30%
ctrl  <- trainControl(method  = "cv",number  = 10)
fit.cv <- train(nb_adults_equi ~ beta_I_colony
+ reaching_repro_prob
+ initial_number_infected_breeders_A
+ dispersal_reaction_time,
data = selected_simulation_dt.trn, method = "rpart", # k nearest neighbors
trControl = ctrl,  # Add the control
# preProcess = c("center","scale"),  # preprocess the selected_simulation_dt (center=> -mean(); scale= /standard.deviation)
#tuneGrid =data.frame(cp=seq(0,1,by=0.0025))) # Try only these values in the CV step
tuneLength = 100)
# tuneLength = 25) # Use 25 sequential numbers instead
pred <- predict(fit.cv,selected_simulation_dt.tst) # predict the output classes
#confusionMatrix(table(selected_simulation_dt.tst[,"nb_adults_equi"],pred))
print(fit.cv) # Plot the results. See at the end the chosen value of "k"
plot(fit.cv) # Plot the Cross-validation output
plot(fit.cv$finalModel)
text(fit.cv$finalModel)
library(rpart.plot)
rpart.plot(fit.cv$finalModel, fallen.leaves = F)
load("simulation_dt/simulation_dt_50_2.RData")
simulation_dt1 = simulation_dt
load("simulation_dt/simulation_dt_150_2.RData")
simulation_dt2 = simulation_dt
load("simulation_dt/simulation_dt_300_2.RData")
simulation_dt3 = simulation_dt
load("simulation_dt/simulation_dt_500_2.RData")
simulation_dt4 = simulation_dt
simulation_dt = rbind(simulation_dt1,
simulation_dt2,
simulation_dt3,
simulation_dt4)
selected_simulation_dt = simulation_dt %>% subset(., scenario == "RS")
model <- rpart(nb_adults_equi ~ beta_I_colony
+ reaching_repro_prob
+ rho_to_colony
+ initial_number_infected_breeders_A
+ dispersal_reaction_time,
data = selected_simulation_dt)
prp(model)
####################Caret with CV
train <- createDataPartition(1:nrow(selected_simulation_dt),p=0.80,list=FALSE) # nb_adults_equi is the "target" class
selected_simulation_dt.trn <- selected_simulation_dt[train,] # Check with str that nrows of selected_simulation_dt.trn is 70% of the original "selected_simulation_dt"
selected_simulation_dt.tst <- selected_simulation_dt[-train,] # And this, just 30%
ctrl  <- trainControl(method  = "cv",number  = 10)
fit.cv <- train(nb_adults_equi ~ beta_I_colony
+ reaching_repro_prob
+ rho_to_colony
+ initial_number_infected_breeders_A
+ dispersal_reaction_time,
data = selected_simulation_dt.trn, method = "rpart", # k nearest neighbors
trControl = ctrl,  # Add the control
# preProcess = c("center","scale"),  # preprocess the selected_simulation_dt (center=> -mean(); scale= /standard.deviation)
#tuneGrid =data.frame(cp=seq(0,1,by=0.0025))) # Try only these values in the CV step
tuneLength = 100)
# tuneLength = 25) # Use 25 sequential numbers instead
pred <- predict(fit.cv,selected_simulation_dt.tst) # predict the output classes
#confusionMatrix(table(selected_simulation_dt.tst[,"nb_adults_equi"],pred))
print(fit.cv) # Plot the results. See at the end the chosen value of "k"
plot(fit.cv) # Plot the Cross-validation output
plot(fit.cv$finalModel)
text(fit.cv$finalModel)
library(rpart.plot)
rpart.plot(fit.cv$finalModel, fallen.leaves = F)
pred <- predict(fit.cv,selected_simulation_dt.tst) # predict the output classes
confusionMatrix(table(selected_simulation_dt.tst[,"nb_adults_equi"],pred))
confusionMatrix(table(selected_simulation_dt.tst[,"nb_adults_equi"],pred))
pred
selected_simulation_dt.tst[,"nb_adults_equi"]
pred
pred[[1]]
pred[[]]
pred[[1:length(pred)]]
length(pred)
pred[1:length(pred)]
pred[[1:length(pred)]]
ac.numeric(pred)
as.numeric(pred)
confusionMatrix(table(selected_simulation_dt.tst[,"nb_adults_equi"],as.numeric(pred)))
selected_simulation_dt.tst[,"nb_adults_equi"]
as.numeric(pred)
pred <- predict(fit.cv,selected_simulation_dt.tst)
pred = predict(fit.cv,selected_simulation_dt.tst) %>%
as.numeric()
real = selected_simulation_dt.tst[,"nb_adults_equi"]
real = selected_simulation_dt.tst[,"nb_adults_equi"]%>%
as.numeric()
confusionMatrix(table(real,pred))
pred = predict(fit.cv,selected_simulation_dt.tst) %>%
as.numeric()
real = selected_simulation_dt.tst[,"nb_adults_equi"]%>%
as.numeric()
confusionMatrix(table(real,pred))
table(real,pred)
print(fit.cv) # Plot the results. See at the end the chosen value of "k"
plot(fit.cv) # Plot the Cross-validation output
plot(fit.cv) # Plot the Cross-validation output
plot(fit.cv$finalModel)
print(fit.cv) # Plot the results. See at the end the chosen value of "k"
plot(fit.cv) # Plot the Cross-validation output
plot(fit.cv$finalModel)
text(fit.cv$finalModel)
library(rpart.plot)
rpart.plot(fit.cv$finalModel, fallen.leaves = F)
selected_simulation_dt
best_strat_dt
selected_simulation_dt = best_strat_dt
library(rpart)				        # Popular decision tree algorithm
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
library(caret)
load("simulation_dt/simulation_dt_50_2.RData")
simulation_dt1 = simulation_dt
load("simulation_dt/simulation_dt_150_2.RData")
simulation_dt2 = simulation_dt
load("simulation_dt/simulation_dt_300_2.RData")
simulation_dt3 = simulation_dt
load("simulation_dt/simulation_dt_500_2.RData")
simulation_dt4 = simulation_dt
simulation_dt = rbind(simulation_dt1,
simulation_dt2,
simulation_dt3,
simulation_dt4)
load("simulation_dt/simulation_dt_50_2.RData")
simulation_dt1 = simulation_dt
load("simulation_dt/simulation_dt_150_2.RData")
simulation_dt2 = simulation_dt
load("simulation_dt/simulation_dt_300_2.RData")
simulation_dt3 = simulation_dt
load("simulation_dt/simulation_dt_500_2.RData")
simulation_dt4 = simulation_dt
simulation_dt = rbind(simulation_dt1,
simulation_dt2,
simulation_dt3,
simulation_dt4)
simulation_dt
simulation_dt %>%
subset(., scenario  == "BO")
simulation_dt %>%
subset(., scenario  == "BO") %>%
dplyr::select(1:2)
simulation_dt %>%
subset(., scenario  == "BO") %>%
dplyr::select(1:27)
X = simulation_dt %>%
subset(., scenario  == "BO") %>%
dplyr::select(1:26)
Y = simulation_dt %>%
subset(., scenario  == "BO") %>%
dplyr::select(28:ncol(.))
Y
Y = simulation_dt %>%
subset(., scenario  == "BO") %>%
dplyr::select(28:30)
Y
X = simulation_dt %>%
subset(., scenario  == "BO") %>%
dplyr::select(1:26)
Y_BO = simulation_dt %>%
subset(., scenario  == "BO") %>%
dplyr::select(28:30)
Y_RS = simulation_dt %>%
subset(., scenario  == "RS") %>%
dplyr::select(28:30)
cbind(X, Y_BO, Y_RS)
# Exemple de dataframe avec variables explicatives, rÃ©ponses et scÃ©nario
df <- data.frame(
var_expl1 = c(1, 2, 1, 2),
var_expl2 = c(3, 3, 4, 4),
reponse1 = c(10, 12, 15, 18),
reponse2 = c(20, 22, 25, 28),
scenario = c("A", "A", "B", "B")
)
df
library(tidyr)
library(dplyr)
# 1. Restructurer le dataframe pour avoir les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- df %>%
pivot_wider(names_from = scenario, values_from = c(reponse1, reponse2))
df_wide
# Exemple de dataframe avec variables explicatives, rÃ©ponses et scÃ©nario
df <- data.frame(
var_expl1 = c(1, 2, 1, 2),
var_expl2 = c(3, 3, 4, 4),
reponse1 = c(10, 12, 15, 18),
reponse2 = c(20, 22, 25, 28),
scenario = c("A", "A", "B", "B")
)
df
# 2. Calculer les diffÃ©rences entre les scÃ©narios A et B
df_diff <- df_wide %>%
mutate(
diff_reponse1 = reponse1_B - reponse1_A,
diff_reponse2 = reponse2_B - reponse2_A
) %>%
select(var_expl1, var_expl2, diff_reponse1, diff_reponse2)
df_diff
# Exemple de dataframe avec variables explicatives, rÃ©ponses et scÃ©nario
df <- data.frame(
var_expl1 = c(1, 2, 1, 2),
var_expl2 = c(3, 3, 4, 4),
reponse1 = c(10, 12, 15, 18),
reponse2 = c(20, 22, 25, 28),
scenario = c("A", "A", "B", "B")
)
library(tidyr)
library(dplyr)
# 1. Restructurer le dataframe pour avoir les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- df %>%
pivot_wider(names_from = scenario, values_from = c(reponse1, reponse2))
# 2. Calculer les diffÃ©rences entre les scÃ©narios A et B
df_diff <- df_wide %>%
mutate(
diff_reponse1 = reponse1_B - reponse1_A,
diff_reponse2 = reponse2_B - reponse2_A
) %>%
select(var_expl1, var_expl2, diff_reponse1, diff_reponse2)
# Afficher le dataframe final
print(df_diff)
# Exemple de dataframe avec variables explicatives, rÃ©ponses et scÃ©nario
df <- data.frame(
var_expl1 = c(1, 2, 1, 2),
var_expl2 = c(3, 3, 4, 4),
reponse1 = c(10, 12, 15, 18),
reponse2 = c(20, 22, 25, 28),
scenario = c("A", "A", "B", "B")
)
library(tidyr)
library(dplyr)
# 1. Restructurer le dataframe pour avoir les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- df %>%
pivot_wider(names_from = scenario, values_from = c(reponse1, reponse2))
# 2. Calculer les diffÃ©rences entre les scÃ©narios A et B
df_diff <- df_wide %>%
mutate(
diff_reponse1 = reponse1_B - reponse1_A,
diff_reponse2 = reponse2_B - reponse2_A
) %>%
select(var_expl1, var_expl2, diff_reponse1, diff_reponse2)
# Afficher le dataframe final
print(df_diff)
# Exemple de dataframe avec variables explicatives, rÃ©ponses et scÃ©nario
df <- data.frame(
var_expl1 = c(1, 2, 1, 2),
var_expl2 = c(3, 3, 4, 4),
reponse1 = c(10, 12, 15, 18),
reponse2 = c(20, 22, 25, 28),
scenario = c("A", "A", "B", "B")
)
library(tidyr)
library(dplyr)
# Ajouter un identifiant pour chaque paire de lignes
df <- df %>%
group_by(var_expl1, var_expl2) %>%
mutate(id = row_number()) %>%
ungroup()
# 1. Restructurer le dataframe pour avoir les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- df %>%
pivot_wider(names_from = scenario, values_from = c(reponse1, reponse2))
# 2. Calculer les diffÃ©rences entre les scÃ©narios A et B
df_diff <- df_wide %>%
mutate(
diff_reponse1 = reponse1_B - reponse1_A,
diff_reponse2 = reponse2_B - reponse2_A
) %>%
select(var_expl1, var_expl2, diff_reponse1, diff_reponse2)
# Afficher le dataframe final
print(df_diff)
simulation_dt
# 1. Restructurer le dataframe pour avoir les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(nb_adults_equi, nb_infected_colonies))
df_wide
# 2. Calculer les diffÃ©rences entre les scÃ©narios A et B
df_diff <- df_wide %>%
mutate(
diff_reponse1 = reponse1_B - reponse1_A,
diff_reponse2 = reponse2_B - reponse2_A
) %>%
select(var_expl1, var_expl2, diff_reponse1, diff_reponse2)
simulation_dt
# Ãtape 1 : Pivot pour mettre les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(output1, output2, output3))
# Ãtape 1 : Pivot pour mettre les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time))
df_wide
# Ãtape 2 : Automatiser les diffÃ©rences entre tous les scÃ©narios
# Obtenir les noms de colonnes d'outputs pour chaque scÃ©nario
output_columns <- colnames(df_wide)[grepl("output", colnames(df_wide))]
# Identifier les diffÃ©rents scÃ©narios
scenarios <- unique(simulation_dt$scenario)
scenarios
# Calcul dynamique des diffÃ©rences pour chaque output et scÃ©nario
for (output in unique(gsub("_.*", "", output_columns))) {
for (i in 1:(length(scenarios) - 1)) {
for (j in (i + 1):length(scenarios)) {
# Obtenir les colonnes des scÃ©narios Ã  comparer
col1 <- paste0(output, "_", scenarios[i])
col2 <- paste0(output, "_", scenarios[j])
# CrÃ©er la colonne de diffÃ©rence de maniÃ¨re dynamique
diff_col <- paste0("diff_", output, "_", scenarios[j], "_vs_", scenarios[i])
# Ajouter la colonne de diffÃ©rence
df_wide <- df_wide %>%
mutate(!!diff_col := !!sym(col2) - !!sym(col1))
}
}
}
# Afficher le rÃ©sultat final avec les colonnes de diffÃ©rences dynamiques
print(df_wide)
View(df_wide)
# Calcul dynamique des diffÃ©rences pour chaque output et scÃ©nario
for (output in unique(gsub("_.*", "", output_columns))) {
for (i in 1:(length(scenarios) - 1)) {
for (j in (i + 1):length(scenarios)) {
# Obtenir les colonnes des scÃ©narios Ã  comparer
col1 <- paste0(output, "_", scenarios[i])
col2 <- paste0(output, "_", scenarios[j])
# CrÃ©er la colonne de diffÃ©rence de maniÃ¨re dynamique
diff_col <- paste0("diff_", output, "_", scenarios[j], "_vs_", scenarios[i])
# Ajouter la colonne de diffÃ©rence
df_wide <- df_wide %>%
mutate(!!diff_col := !!sym(col2) - !!sym(col1))
}
}
}
View(df_diff)
simulation_dt
# Ãtape 1 : Pivot pour mettre les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time))
# Ãtape 2 : Automatiser les diffÃ©rences entre tous les scÃ©narios
# Obtenir les noms de colonnes d'outputs pour chaque scÃ©nario
output_columns <- colnames(df_wide)[grepl("output", colnames(df_wide))]
# Identifier les diffÃ©rents scÃ©narios
scenarios <- unique(simulation_dt$scenario)
# Calcul dynamique des diffÃ©rences pour chaque output et scÃ©nario
for (output in unique(gsub("_.*", "", output_columns))) {
for (i in 1:(length(scenarios) - 1)) {
for (j in (i + 1):length(scenarios)) {
# Obtenir les colonnes des scÃ©narios Ã  comparer
col1 <- paste0(output, "_", scenarios[i])
col2 <- paste0(output, "_", scenarios[j])
# CrÃ©er la colonne de diffÃ©rence de maniÃ¨re dynamique
diff_col <- paste0("diff_", output, "_", scenarios[j], "_vs_", scenarios[i])
# Ajouter la colonne de diffÃ©rence
df_wide <- df_wide %>%
mutate(!!diff_col := !!sym(col2) - !!sym(col1))
}
}
}
# Afficher le rÃ©sultat final avec les colonnes de diffÃ©rences dynamiques
print(df_wide)
View(df_diff)
View(df_wide)
unique(gsub("_.*", "", output_columns))
output_columns
# Ãtape 2 : Automatiser les diffÃ©rences entre tous les scÃ©narios
# Obtenir les noms de colonnes d'outputs pour chaque scÃ©nario
output_columns <- colnames(df_wide)[grepl("output", colnames(df_wide))]
output_columns
# Ãtape 1 : Pivot pour mettre les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time))
# Ãtape 2 : Automatiser les diffÃ©rences entre tous les scÃ©narios
# Obtenir les noms de colonnes d'outputs pour chaque scÃ©nario
output_columns <- colnames(df_wide)[grepl("output", colnames(df_wide))]
output_columns
# Ãtape 1 : Pivot pour mettre les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time))
simulation_dt[, 28:30]
selected_simulation_dt = simulation_dt[, 28:30]
selected_simulation_dt = simulation_dt[, 28:30]
selected_simulation_dt
selected_simulation_dt = simulation_dt[, 27:30]
selected_simulation_dt
# Ãtape 1 : Pivot pour mettre les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time))
df_wide
selected_simulation_dt = simulation_dt[, 27:30]
# Ãtape 1 : Pivot pour mettre les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- selected_simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time))
df_wide
View(df_wide)
selected_simulation_dt
# Ãtape 1 : Pivot pour mettre les scÃ©narios cÃ´te Ã  cÃ´te
df_wide <- selected_simulation_dt %>%
pivot_wider(names_from = scenario, values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time))
simulation_dt[, 1:30] %>%
subset(., scenario == "BO") %>%
dplyr::select(-scenario)
