p_equi.survi.ad = ggplot()+
geom_violin(data = dt_panel_5, aes(x = scenario, y = equi.survi.ad),
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5, aes(x = scenario, y = equi.survi.ad),
binaxis='y', stackdir='center',
binwidth = 2,
color = "darkgrey", alpha = 0.5)+
ggthemes::theme_clean() +
theme(
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, NA)
p_nb_infected_colonies = ggplot()+
geom_violin(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
color = "darkgrey", alpha = 0.5)+
theme(
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 0.2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, 4)
plot_grid(p_equi.survi.ad,
p_nb_infected_colonies,
labels = c("A", "B"))
p_nb_infected_colonies = ggplot()+
geom_violin(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
binwidth = 2,
color = "darkgrey", alpha = 0.5)+
theme(
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 0.2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, 4)
p_nb_infected_colonies
p_nb_infected_colonies = ggplot()+
geom_violin(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
binwidth = 0.02,
color = "darkgrey", alpha = 0.5)+
theme(
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 0.2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, 4)
plot_grid(p_equi.survi.ad,
p_nb_infected_colonies,
labels = c("A", "B"))
p_nb_infected_colonies = ggplot()+
geom_violin(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
binwidth = 0.04,
color = "darkgrey", alpha = 0.5)+
theme(
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 0.2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, 4)
plot_grid(p_equi.survi.ad,
p_nb_infected_colonies,
labels = c("A", "B"))
p_equi.survi.ad = ggplot()+
geom_violin(data = dt_panel_5, aes(x = scenario, y = equi.survi.ad),
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5, aes(x = scenario, y = equi.survi.ad),
binaxis='y', stackdir='center',
binwidth = 2,
color = "darkgrey", alpha = 0.5)+
ggthemes::theme_clean() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, NA)
p_nb_infected_colonies = ggplot()+
geom_violin(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
binwidth = 0.04,
color = "darkgrey", alpha = 0.5)+
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 0.2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, 4)
plot_grid(p_equi.survi.ad,
p_nb_infected_colonies,
labels = c("A", "B"))
p_nb_infected_colonies = ggplot()+
geom_violin(data = dt_panel_5,
color = "lightgrey",
aes(x = scenario, y = nb_infected_colonies),
trim=FALSE, position=position_dodge(1)) +
geom_dotplot(data = dt_panel_5,
aes(x = scenario, y = nb_infected_colonies),
binaxis='y', stackdir='center',
binwidth = 0.04,
color = "darkgrey", alpha = 0.5)+
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.border = element_blank(), # Enlever la bordure du panel
axis.title = element_text(size = 11),  # Thicken axis titles
axis.text = element_text(size = 10),  # Thicken axis text
axis.line = element_line(linewidth = 0.2),  # Thicken axis lines
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
legend.position =  "none"
)+
ylim(0, 4)
plot_grid(p_equi.survi.ad,
p_nb_infected_colonies,
labels = c("A", "B"))
no_stress
proactive_strategy
time1 <- Sys.time()
output = gillespie_seir(
# All parameters
param = param,
# Do we induce dispersion ?
induced_dispersal = T,
# Induced dispersion mode (deterministic or stochastic)
dispersal_stochactic = F,
# Reaction time between 1rst death and induced dispersal
dispersal_reaction_time = 2,
# Initial conditions
initial_number_infected_breeders_A = 0,
initial_number_breeders_A = 100,
initial_number_breeders_B = 100,
initial_number_breeders_C = 10,
# Number of simu_adultlation days
total_time = 30,
# Parameter of the taul-leap agorithm
tau = 0.05)
time2 <- Sys.time()
time2 - time1
plot_seir(output_ = output)
param = param
param = param
induced_dispersal = T
dispersal_stochactic = F
dispersal_reaction_time = 2
initial_number_infected_breeders_A = 0
initial_number_breeders_A = 100
initial_number_breeders_B = 100
initial_number_breeders_C = 10
total_time = 30
tau = 0.05
## Nestlings
## In colony A
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_A_N = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## In colony B
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_B_N = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## In colony C
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_C_N = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## Breeders
## In colony A
N = initial_number_breeders_A/2
initial_infected = initial_number_infected_breeders_A
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_A = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## At sea A
N = initial_number_breeders_A/2
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_sea_a = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## In colony B
N = initial_number_breeders_B/2
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_B <- c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## At sea B
N = initial_number_breeders_B/2
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_sea_b = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## In colony C
N = initial_number_breeders_C/2
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_C <- c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## At sea C
N = initial_number_breeders_C/2
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_sea_c = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## Non-Breeders
## In colony A
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_A_NB = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## In colony B
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_B_NB <- c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## In colony C
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_C_NB <- c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
## At sea
N = 0
initial_infected = 0
initial_exposed = 0
initial_recovered = 0
initial_susceptible = N - initial_infected - initial_exposed - initial_recovered
initial_dead = 0
initial_state_sea_NB = c(S = initial_susceptible,
E = initial_exposed,
I = initial_infected,
R = initial_recovered,
D = initial_dead)
initial_state = matrix(data = c(initial_state_A_N,
initial_state_A,
initial_state_sea_a,
initial_state_A_NB,
initial_state_B_N,
initial_state_B,
initial_state_sea_b,
initial_state_B_NB,
initial_state_C_N,
initial_state_C,
initial_state_sea_c,
initial_state_C_NB,
initial_state_sea_NB
),
nrow = 13, ncol = 5,
byrow = T)
beta_E_colony = param$beta[1,1]
beta_I_colony = param$beta[1,2]
sigma = param$sigma
eta = param$eta
gamma = param$gamma
mu_adult = param$mu_adult
mu_nestling = param$mu_nestling
zeta_to_colony = param$zeta_to_colony
zeta_to_sea = param$zeta_to_sea
psi = param$psi
rho_to_colony = param$rho_to_colony
rho_to_sea = param$rho_to_sea
prop_dispersal = param$prop_dispersal
dispersal_date = param$dispersal_date
hatching_date = param$hatching_date
# Initialization
times = c(0)
states = array(dim = c(13,5,1), data = initial_state)
already_dispersed = F
simulated_dispersal_date = NA
already_hatched = F
first_death = F
first_death_date = NA
S_a_N = states[1, 1, dim(states)[3]]
E_a_N = states[1, 2, dim(states)[3]]
I_a_N = states[1, 3, dim(states)[3]]
R_a_N = states[1, 4, dim(states)[3]]
D_a_N = states[1, 5, dim(states)[3]]
S_a = states[2, 1, dim(states)[3]]
E_a = states[2, 2, dim(states)[3]]
I_a = states[2, 3, dim(states)[3]]
R_a = states[2, 4, dim(states)[3]]
D_a = states[2, 5, dim(states)[3]]
S_sea_a = states[3, 1, dim(states)[3]]
E_sea_a = states[3, 2, dim(states)[3]]
I_sea_a = states[3, 3, dim(states)[3]]
R_sea_a = states[3, 4, dim(states)[3]]
D_sea_a = states[3, 5, dim(states)[3]]
S_a_NB = states[4, 1, dim(states)[3]]
E_a_NB = states[4, 2, dim(states)[3]]
I_a_NB = states[4, 3, dim(states)[3]]
R_a_NB = states[4, 4, dim(states)[3]]
D_a_NB = states[4, 5, dim(states)[3]]
S_b_N = states[5, 1, dim(states)[3]]
E_b_N = states[5, 2, dim(states)[3]]
I_b_N = states[5, 3, dim(states)[3]]
R_b_N = states[5, 4, dim(states)[3]]
D_b_N = states[5, 5, dim(states)[3]]
S_b = states[6, 1, dim(states)[3]]
E_b = states[6, 2, dim(states)[3]]
I_b = states[6, 3, dim(states)[3]]
R_b = states[6, 4, dim(states)[3]]
D_b = states[6, 5, dim(states)[3]]
S_sea_b = states[7, 1, dim(states)[3]]
E_sea_b = states[7, 2, dim(states)[3]]
I_sea_b = states[7, 3, dim(states)[3]]
R_sea_b = states[7, 4, dim(states)[3]]
D_sea_b = states[7, 5, dim(states)[3]]
S_b_NB = states[8, 1, dim(states)[3]]
E_b_NB = states[8, 2, dim(states)[3]]
I_b_NB = states[8, 3, dim(states)[3]]
R_b_NB = states[8, 4, dim(states)[3]]
D_b_NB = states[8, 5, dim(states)[3]]
S_c_N = states[9, 1, dim(states)[3]]
E_c_N = states[9, 2, dim(states)[3]]
I_c_N = states[9, 3, dim(states)[3]]
R_c_N = states[9, 4, dim(states)[3]]
D_c_N = states[9, 5, dim(states)[3]]
S_c = states[10, 1, dim(states)[3]]
E_c = states[10, 2, dim(states)[3]]
I_c = states[10, 3, dim(states)[3]]
R_c = states[10, 4, dim(states)[3]]
D_c = states[10, 5, dim(states)[3]]
S_sea_c = states[11, 1, dim(states)[3]]
E_sea_c = states[11, 2, dim(states)[3]]
I_sea_c = states[11, 3, dim(states)[3]]
R_sea_c = states[11, 4, dim(states)[3]]
D_sea_c = states[11, 5, dim(states)[3]]
S_c_NB = states[12, 1, dim(states)[3]]
E_c_NB = states[12, 2, dim(states)[3]]
I_c_NB = states[12, 3, dim(states)[3]]
R_c_NB = states[12, 4, dim(states)[3]]
D_c_NB = states[12, 5, dim(states)[3]]
S_sea_NB = states[13, 1, dim(states)[3]]
E_sea_NB = states[13, 2, dim(states)[3]]
I_sea_NB = states[13, 3, dim(states)[3]]
R_sea_NB = states[13, 4, dim(states)[3]]
D_sea_NB = states[13, 5, dim(states)[3]]
# Rates of each possible event
rates = calculate_rates(beta_E_colony, beta_I_colony,
sigma,eta, gamma, mu_adult, mu_nestling,
zeta_to_colony, zeta_to_sea, psi, rho_to_colony, rho_to_sea,
prop_dispersal, prop_prospecting, dispersal_date,
hatching_date,
# A
S_a_N, E_a_N, I_a_N, R_a_N, D_a_N,
S_a, E_a, I_a, R_a, D_a,
S_sea_a, E_sea_a, I_sea_a, R_sea_a, D_sea_a,
S_a_NB, E_a_NB, I_a_NB, R_a_NB, D_a_NB,
# B
S_b_N, E_b_N, I_b_N, R_b_N, D_b_N,
S_b, E_b, I_b, R_b, D_b,
S_sea_b, E_sea_b, I_sea_b, R_sea_b, D_sea_b,
S_b_NB, E_b_NB, I_b_NB, R_b_NB, D_b_NB,
# C
S_c_N, E_c_N, I_c_N, R_c_N, D_c_N,
S_c, E_c, I_c, R_c, D_c,
S_sea_c, E_sea_c, I_sea_c, R_sea_c, D_sea_c,
S_c_NB, E_c_NB, I_c_NB, R_c_NB, D_c_NB,
# Non-breeders at sea
S_sea_NB, E_sea_NB, I_sea_NB, R_sea_NB, D_sea_NB)
total_rate = sum(rates)
if (total_rate == 0) {
break
}
time_step <- min(tau, (total_time - times[length(times)]))
next_time = times[length(times)] + time_step
time_step
next_time
(next_time > hatching_date & !already_hatched)
# Determining the date of first infection
if (!first_death & D_a > 0){
first_death_date = times[length(times)]
first_death = T
}
induced_dispersal
already_dispersed
induced_dispersal
already_dispersed
dispersal_stochactic
next_time
dispersal_date
library(tidyverse)
