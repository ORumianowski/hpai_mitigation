names_from = scenario, # Les colonnes à créer selon les valeurs uniques de "scenario"
values_from = combinaison_valeurs # Les valeurs à remplir
)
# Affichage du résultat
print(df_large)
# Installer le package tidyr s'il n'est pas déjà installé
# install.packages("tidyr")
library(tidyr)
library(dplyr)
# Exemple de DataFrame
df <- data.frame(
scenario = c("A", "B", "A", "C", "B", "C"),
valeur1 = c(10, 20, 30, 40, 50, 60),
valeur2 = c(5, 15, 25, 35, 45, 55),
valeur3 = c(2, 4, 6, 8, 10, 12)
)
# Création de la clé de combinaison des valeurs
df <- df %>%
unite("combinaison_valeurs", c(valeur1, valeur2, valeur3), sep = "_")
# Transformation du format long vers le format large
df_large <- df %>%
pivot_wider(
names_from = scenario, # Les colonnes à créer selon les valeurs uniques de "scenario"
values_from = combinaison_valeurs # Les valeurs à remplir
)
# Affichage du résultat
print(df_large)
df_large
df
df2 <- data.frame(
A_valeur1 = c(10, 30),
A_valeur2 = c(5, 25),
B_valeur1 = c(20, 40),
B_valeur1 = c(15, 35)
)
df2
# Charger les packages nécessaires
library(tidyr)
library(dplyr)
# Exemple de DataFrame
df <- data.frame(
scenario = c("A", "B", "A", "B"),
valeur1 = c(10, 20, 30, 40),
valeur2 = c(5, 15, 25, 35)
)
# Transformation du format long au format large
df_wide <- df %>%
pivot_wider(
names_from = scenario,                # Utilise la colonne "scenario" pour créer de nouvelles colonnes
values_from = c(valeur1, valeur2),    # Les colonnes dont les valeurs seront placées dans les nouvelles colonnes
names_glue = "{scenario}_valeur{.value}"  # Personnalise le nom des colonnes
)
# Affichage du résultat
print(df_wide)
# Charger les packages nécessaires
library(tidyr)
library(dplyr)
# Exemple de DataFrame
df <- data.frame(
scenario = c("A", "B", "A", "B"),
valeur1 = c(10, 20, 30, 40),
valeur2 = c(5, 15, 25, 35)
)
# Transformation du format long au format large
df_wide <- df %>%
pivot_wider(
names_from = scenario,                # Utilise la colonne "scenario" pour créer de nouvelles colonnes
values_from = c(valeur1, valeur2),    # Les colonnes dont les valeurs seront placées dans les nouvelles colonnes
names_glue = "{scenario}_valeur{.value}"  # Personnalise le nom des colonnes
)
# Affichage du résultat
print(df_wide)
# Charger les packages nécessaires
library(tidyr)
library(dplyr)
# Exemple de DataFrame
df <- data.frame(
scenario = c("A", "B", "A", "B"),
valeur1 = c(10, 20, 30, 40),
valeur2 = c(5, 15, 25, 35)
)
# Transformation du format long au format large
df_wide <- df %>%
pivot_wider(
names_from = scenario,                # Utilise la colonne "scenario" pour créer de nouvelles colonnes
values_from = c(valeur1, valeur2),    # Les colonnes dont les valeurs seront placées dans les nouvelles colonnes
names_glue = "{scenario}_valeur{.value}"  # Corrige les noms des colonnes
)
# Désimbriquer les listes si elles existent
df_wide <- df_wide %>%
unnest(cols = everything())  # Désimbriquer toutes les colonnes
# Affichage du résultat
print(df_wide)
# Transformation du format long au format large
df_wide <- df %>%
pivot_wider(
names_from = scenario,                # Utilise la colonne "scenario" pour créer de nouvelles colonnes
values_from = c(valeur1, valeur2),    # Les colonnes dont les valeurs seront placées dans les nouvelles colonnes
names_glue = "{scenario}_valeur{.value}"  # Corrige les noms des colonnes
) %>%
unnest(cols = everything())  # Désimbriquer toutes les colonnes
# Affichage du résultat
print(df_wide)
load("simulation_dt/simulation_dt_1000it_cluster_1.RData")
simulation_dt1 = simulation_dt
load("simulation_dt/simulation_dt_1000it_ordi_1.RData")
simulation_dt2 = simulation_dt
simulation_dt = rbind(simulation_dt1,
simulation_dt2)
dt = simulation_dt[,1:32]
View(dt)
# Charger les packages nécessaires
library(tidyr)
library(dplyr)
# Transformation du format long au format large
df_wide <- dt %>%
pivot_wider(
names_from = scenario,                # Utilise la colonne "scenario" pour créer de nouvelles colonnes
values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time),    # Les colonnes dont les valeurs seront placées dans les nouvelles colonnes
names_glue = "{scenario}_valeur{.value}"  # Corrige les noms des colonnes
) %>%
unnest(cols = everything())  # Désimbriquer toutes les colonnes
# Affichage du résultat
print(df_wide)
View(df_wide)
library(tidyverse)
load("simulation_dt/simulation_dt_1000it_cluster_1.RData")
simulation_dt1 = simulation_dt
load("simulation_dt/simulation_dt_1000it_ordi_1.RData")
simulation_dt2 = simulation_dt
simulation_dt = rbind(simulation_dt1,
simulation_dt2)
dt = simulation_dt[,1:32]
df2 <- dt %>%
pivot_wider(
names_from = scenario,
values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time),
names_glue = "{scenario}_valeur{.value}"
) %>%
unnest(cols = everything())
dt2 <- dt %>%
pivot_wider(
names_from = scenario,
values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time),
names_glue = "{scenario}_valeur{.value}"
) %>%
unnest(cols = everything())
dt2 <- dt %>%
pivot_wider(
names_from = scenario,
values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time),
names_glue = "{scenario}_{.value}"
) %>%
unnest(cols = everything())
dt2 <- dt %>%
pivot_wider(
names_from = scenario,
values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time),
names_glue = "{scenario}_{.value}"
) %>%
unnest(cols = everything())
dt3 = dt2 %>%
mutate(BO_P2_nb_adults_equi = BO_nb_adults_equi - P2_nb_adults_equi)
View(dt3)
colnames(dt3)
colnames(dt3)
param = c("initial_number_infected_breeders_A", "initial_number_infected_breeders_B", "initial_number_infected_breeders_C", "initial_number_breeders_A",
"initial_number_breeders_B",          "initial_number_breeders_C",          "dispersal_reaction_time",            "dispersal_date",
"hatching_date",                      "tau",                                "total_time",                         "prop_dispersal",
"beta_E_colony",                      "beta_I_colony",                      "incubation_period",                  "eta",
"infectious_period",                  "adult_mortality",                    "nestling_mortality",                 "avrg_stay_B_colony",
"avrg_stay_B_sea",                    "avrg_stay_NB_colony",                "avrg_stay_NB_sea",                   "theta",
"psi",                                "hatching_sd",                        "reaching_repro_prob",                "prob_detection"  )
dt3 %>%
dplyr::select(c(param, "BO_P2_nb_adults_equi"))
dt4 = dt3 %>%
dplyr::select(c(param, "BO_P2_nb_adults_equi"))
pcor_results <- pcor(dt4)
library(ppcor)
library(GGally)
library(ggplot2)
pcor_results <- pcor(dt4)
library(ppcor)
library(GGally)
library(ggplot2)
library(tidyverse)
pcor_results <- pcor(dt4)
?pcor
??pcor
pcor_results <- ppcor(dt4)
pcor_results <- ppcor:pcor(dt4)
pcor_results <- pcor(dt4)
install.packages("ppcor")
library(ppcor)
dt4 = dt3 %>%
dplyr::select(c(param, "BO_P2_nb_adults_equi"))
pcor_results <- pcor(dt4)
pcor_results$estimate
# Extraire la matrice des corrélations partielles
pcor_matrix <- pcor_results$estimate
# Convertir la matrice en format long pour ggplot2
library(reshape2)
pcor_long <- melt(pcor_matrix)
# Heatmap avec ggplot2
ggplot(pcor_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
View(dt4)
dt4 %>%
as.numeric() %>%
scale()
dt4 %>%
as.numeric()
dt4 %>% st()
dt4 %>% str()
dt4 %>%
scale()
dt4
dt5 = dt4 %>%
scale()
pcor_results <- pcor(dt5)
dt5 = dt4 %>%
scale()
dt4 = dt3 %>%
dplyr::select(c(param, "BO_P2_nb_adults_equi"))
dt5 = dt4
pcor_results <- pcor(dt5)
pcor_results$estimate
# Extraire la matrice des corrélations partielles
pcor_matrix <- pcor_results$estimate
# Convertir la matrice en format long pour ggplot2
library(reshape2)
pcor_long <- melt(pcor_matrix)
# Heatmap avec ggplot2
ggplot(pcor_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
install.packages("psych")
library(psych)
partial_corr_matrix <- partial.r(dt5)
dt5
summary(dt5
)
dt5 = dt4%>%
dplyr::select(c("initial_number_infected_breeders_A", "beta_I_colony", "BO_P2_nb_adults_equi"))
dt5 = dt4 %>%
dplyr::select(c("initial_number_infected_breeders_A", "beta_I_colony", "BO_P2_nb_adults_equi"))
pcor_results  = pcor(dt5)
pcor_results
# Heatmap avec ggplot2
ggplot(pcor_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
pcor_results  = pcor(dt5)
pcor_matrix <- pcor_results$estimate
library(reshape2)
pcor_long <- melt(pcor_matrix)
# Heatmap avec ggplot2
ggplot(pcor_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
dt5 = dt4 %>%
dplyr::select(c("BO_P2_nb_adults_equi",
"initial_number_infected_breeders_A",
"hatching_date",                      "prop_dispersal",
"beta_I_colony",                      "incubation_period",
"infectious_period",                  "adult_mortality",                    "nestling_mortality",
"avrg_stay_NB_sea",                   "theta",
"psi",                                "hatching_sd",                        "reaching_repro_prob",                "prob_detection"  ))
pcor_results  = pcor(dt5)
pcor_matrix <- pcor_results$estimate
library(reshape2)
pcor_long <- melt(pcor_matrix)
# Heatmap avec ggplot2
ggplot(pcor_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
dt5 = dt4 %>%
dplyr::select(c("BO_P2_nb_adults_equi",
"initial_number_infected_breeders_A",
"hatching_date",                      "prop_dispersal",
"beta_I_colony",                      "incubation_period",
"infectious_period",                  "adult_mortality",                    "nestling_mortality",
"avrg_stay_NB_sea",                   "theta",
"reaching_repro_prob",                "prob_detection"  ))
pcor_results  = pcor(dt5)
pcor_matrix <- pcor_results$estimate
library(reshape2)
pcor_long <- melt(pcor_matrix)
# Heatmap avec ggplot2
ggplot(pcor_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
pcor_matrix
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi)
pcor_matrix
library(reshape2)
pcor_long <- melt(pcor_matrix)
# Heatmap avec ggplot2
ggplot(pcor_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
pcor_long
pcor_results$estimate
pcor_results$estimate %>%
data.frame()
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi)
pcor_matrix
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi)
# Heatmap avec ggplot2
ggplot(pcor_long, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
# Heatmap avec ggplot2
ggplot(pcor_matrix, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Corrélation partielle") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Matrice des corrélations partielles",
x = "Variables",
y = "Variables")
pcor_matrix
pcor.test(dt5)
?pcor.test
pcor.test(dt5[,c("infectious_period","adult_mortality", )], z = dt5[, "BO_P2_nb_adults_equi"])
pcor.test(dt5[,c("infectious_period","adult_mortality")], z = dt5[, "BO_P2_nb_adults_equi"])
pcor_matrix
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi) %>%
sort()
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi) %>%
arrange(BO_P2_nb_adults_equi)
pcor_matrix
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi) %>%
arrange(desc(BO_P2_nb_adults_equi))
View(pcor_matrix)
dt5 = dt4 %>%
dplyr::select(c("BO_P2_nb_adults_equi",
"initial_number_infected_breeders_A",
"hatching_date",                      "prop_dispersal",
"beta_I_colony",                      "incubation_period",
"infectious_period",                  "adult_mortality",                    "nestling_mortality",
"avrg_stay_NB_sea",                   "theta",
"reaching_repro_prob",                "prob_detection"  ))
pcor_results  = pcor(dt5)
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi) %>%
arrange(desc(BO_P2_nb_adults_equi))
dt5 = dt4 %>%
dplyr::select(c("BO_P2_nb_adults_equi",
"initial_number_infected_breeders_A",
"hatching_date",                      "prop_dispersal",
"beta_I_colony",                      "incubation_period",
"infectious_period",                  "adult_mortality",
"nestling_mortality",
"avrg_stay_NB_sea",                   "theta",
"reaching_repro_prob",                "prob_detection"  ))
pcor_results  = pcor(dt5)
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi) %>%
arrange(desc(BO_P2_nb_adults_equi))
pcor_matrix
param = c("initial_number_infected_breeders_A", "initial_number_infected_breeders_B", "initial_number_infected_breeders_C", "initial_number_breeders_A",
"initial_number_breeders_B",          "initial_number_breeders_C",          "dispersal_reaction_time",            "dispersal_date",
"hatching_date",                      "tau",                                "total_time",                         "prop_dispersal",
"beta_E_colony",                      "beta_I_colony",                      "incubation_period",                  "eta",
"infectious_period",                  "adult_mortality",                    "nestling_mortality",                 "avrg_stay_B_colony",
"avrg_stay_B_sea",                    "avrg_stay_NB_colony",                "avrg_stay_NB_sea",                   "theta",
"psi",                                "hatching_sd",                        "reaching_repro_prob",                "prob_detection"  )
param_evaluated = c("BO_P2_nb_adults_equi",
"initial_number_infected_breeders_A",
"hatching_date",                      "prop_dispersal",
"beta_I_colony",                      "incubation_period",
"infectious_period",                  "adult_mortality",
"nestling_mortality",
"avrg_stay_NB_sea",                   "theta",
"reaching_repro_prob",                "prob_detection"  )
setwd("C:/Data/1_Adminitratif/Emploi/cornell/02_projet/hpai_mitigation/02_models")
library(ppcor)
library(GGally)
library(ggplot2)
library(tidyverse)
load("simulation_dt/simulation_dt_1000it_cluster_1.RData")
simulation_dt1 = simulation_dt
load("simulation_dt/simulation_dt_1000it_ordi_1.RData")
simulation_dt2 = simulation_dt
simulation_dt = rbind(simulation_dt1,
simulation_dt2)
param = c("initial_number_infected_breeders_A", "initial_number_infected_breeders_B", "initial_number_infected_breeders_C", "initial_number_breeders_A",
"initial_number_breeders_B",          "initial_number_breeders_C",          "dispersal_reaction_time",            "dispersal_date",
"hatching_date",                      "tau",                                "total_time",                         "prop_dispersal",
"beta_E_colony",                      "beta_I_colony",                      "incubation_period",                  "eta",
"infectious_period",                  "adult_mortality",                    "nestling_mortality",                 "avrg_stay_B_colony",
"avrg_stay_B_sea",                    "avrg_stay_NB_colony",                "avrg_stay_NB_sea",                   "theta",
"psi",                                "hatching_sd",                        "reaching_repro_prob",                "prob_detection"  )
param_evaluated = c("BO_P2_nb_adults_equi",
"initial_number_infected_breeders_A",
"hatching_date",                      "prop_dispersal",
"beta_I_colony",                      "incubation_period",
"infectious_period",                  "adult_mortality",
"nestling_mortality",
"avrg_stay_NB_sea",                   "theta",
"reaching_repro_prob",                "prob_detection"  )
dt = simulation_dt[,1:32]
dt2 <- dt %>%
pivot_wider(
names_from = scenario,
values_from = c(nb_adults_equi, nb_infected_colonies, infected_X_time),
names_glue = "{scenario}_{.value}"
) %>%
unnest(cols = everything()) %>%
mutate(BO_P2_nb_adults_equi = BO_nb_adults_equi - P2_nb_adults_equi) %>%
mutate(BO_RS_nb_adults_equi = BO_nb_adults_equi - RS_nb_adults_equi)
dt3 = dt2 %>%
dplyr::select(c(param, "BO_P2_nb_adults_equi"))%>%
dplyr::select(param_evaluated)
pcor_results  = pcor(dt3)
pcor_matrix <- pcor_results$estimate %>%
data.frame() %>%
dplyr::select(BO_P2_nb_adults_equi) %>%
arrange(desc(BO_P2_nb_adults_equi))
pcor_matrix
